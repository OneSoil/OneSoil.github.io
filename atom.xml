<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://onehr7.github.io/atom.xml" rel="self"/>
  
  <link href="https://onehr7.github.io/"/>
  <updated>2021-01-11T15:35:45.117Z</updated>
  <id>https://onehr7.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://onehr7.github.io/2021/01/11/hello-world/"/>
    <id>https://onehr7.github.io/2021/01/11/hello-world/</id>
    <published>2021-01-11T15:35:45.117Z</published>
    <updated>2021-01-11T15:35:45.117Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MySQL必知必会</title>
    <link href="https://onehr7.github.io/2019/12/11/MySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/"/>
    <id>https://onehr7.github.io/2019/12/11/MySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/</id>
    <published>2019-12-11T11:21:00.000Z</published>
    <updated>2021-01-11T16:05:33.366Z</updated>
    
    <content type="html"><![CDATA[<h3 id="MySQL必知必会"><a href="#MySQL必知必会" class="headerlink" title="MySQL必知必会"></a>MySQL必知必会</h3><hr><h4 id="一、使用MySQL"><a href="#一、使用MySQL" class="headerlink" title="一、使用MySQL"></a>一、使用MySQL</h4><h5 id="1-数据库"><a href="#1-数据库" class="headerlink" title="1.数据库"></a>1.数据库</h5><ul><li>选择数据库<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE database_name;</span><br></pre></td></tr></table></figure></li><li>查看数据库<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br></pre></td></tr></table></figure><h5 id="2-表"><a href="#2-表" class="headerlink" title="2.表"></a>2.表</h5></li><li>查看表<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TABLES；</span><br></pre></td></tr></table></figure></li><li>查看指定表中的列<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> COLUMNS <span class="keyword">FROM</span> table_name;</span><br><span class="line"><span class="keyword">DESCRIBE</span> table_name;</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="二、SELECT"><a href="#二、SELECT" class="headerlink" title="二、SELECT"></a>二、SELECT</h4><h3 id="End"><a href="#End" class="headerlink" title="End"></a>End</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;MySQL必知必会&quot;&gt;&lt;a href=&quot;#MySQL必知必会&quot; class=&quot;headerlink&quot; title=&quot;MySQL必知必会&quot;&gt;&lt;/a&gt;MySQL必知必会&lt;/h3&gt;&lt;hr&gt;
&lt;h4 id=&quot;一、使用MySQL&quot;&gt;&lt;a href=&quot;#一、使用MySQL&quot; </summary>
      
    
    
    
    <category term="MySQL" scheme="https://onehr7.github.io/categories/MySQL/"/>
    
    
    <category term="SQL" scheme="https://onehr7.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>SSM配置模板</title>
    <link href="https://onehr7.github.io/2019/11/21/ssm%E9%85%8D%E7%BD%AE%E6%A8%A1%E6%9D%BF/"/>
    <id>https://onehr7.github.io/2019/11/21/ssm%E9%85%8D%E7%BD%AE%E6%A8%A1%E6%9D%BF/</id>
    <published>2019-11-21T03:21:00.000Z</published>
    <updated>2021-01-11T16:05:32.667Z</updated>
    
    <content type="html"><![CDATA[<h4 id="SSM配置文件模板"><a href="#SSM配置文件模板" class="headerlink" title="SSM配置文件模板"></a>SSM配置文件模板</h4><hr><hr><h5 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置applicationContext初始化路径--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!--为0表示启动时就加载这个servlet--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>0<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><hr><h5 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xxxxx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxxxx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--阿里云镜像仓库--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><hr><h5 id="applicationContext-xml"><a href="#applicationContext-xml" class="headerlink" title="applicationContext.xml"></a>applicationContext.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:mv</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    在Spring IOC初始化过程中,自动创建并管理com.imooc.springmvc及子包中</span></span><br><span class="line"><span class="comment">    拥有以下注解的对象.</span></span><br><span class="line"><span class="comment">    @Repository</span></span><br><span class="line"><span class="comment">    @Service</span></span><br><span class="line"><span class="comment">    @Controller</span></span><br><span class="line"><span class="comment">    @Component</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;whr.springmvc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--通过注解进行开发--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--排除静态资源，提高执行效率--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;SSM配置文件模板&quot;&gt;&lt;a href=&quot;#SSM配置文件模板&quot; class=&quot;headerlink&quot; title=&quot;SSM配置文件模板&quot;&gt;&lt;/a&gt;SSM配置文件模板&lt;/h4&gt;&lt;hr&gt;
&lt;hr&gt;
&lt;h5 id=&quot;web-xml&quot;&gt;&lt;a href=&quot;#web-xml&quot;</summary>
      
    
    
    
    <category term="模板" scheme="https://onehr7.github.io/categories/%E6%A8%A1%E6%9D%BF/"/>
    
    
    <category term="SSM" scheme="https://onehr7.github.io/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>插入排序</title>
    <link href="https://onehr7.github.io/2019/11/07/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    <id>https://onehr7.github.io/2019/11/07/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</id>
    <published>2019-11-07T07:28:00.000Z</published>
    <updated>2021-01-11T16:05:32.072Z</updated>
    
    <content type="html"><![CDATA[<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><hr><hr><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><ul><li>从序列中不断取出元素，插入已排序的序列中</li><li>时间复杂度：最好O(N),最坏O(N^2)</li></ul><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.wang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-11-07 15:07</span></span><br><span class="line"><span class="comment"> * function_:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span> [] list)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; list.length; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = list[i];</span><br><span class="line">            <span class="keyword">int</span> k;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将比现在大的元素向后移</span></span><br><span class="line">            <span class="keyword">for</span>(k = i; k &gt; <span class="number">0</span> &amp;&amp; list[k-<span class="number">1</span>] &gt; tmp; k--)&#123;</span><br><span class="line">                list[k] = list[k - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            list[k] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> [] list = &#123;<span class="number">29</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">37</span>,<span class="number">14</span>&#125;;</span><br><span class="line">        insertSort(list);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> a : list)&#123;</span><br><span class="line">            System.out.print(a+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;插入排序&quot;&gt;&lt;a href=&quot;#插入排序&quot; class=&quot;headerlink&quot; title=&quot;插入排序&quot;&gt;&lt;/a&gt;插入排序&lt;/h2&gt;&lt;hr&gt;
&lt;hr&gt;
&lt;h3 id=&quot;实现原理&quot;&gt;&lt;a href=&quot;#实现原理&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="数据结构" scheme="https://onehr7.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="排序" scheme="https://onehr7.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>归并排序</title>
    <link href="https://onehr7.github.io/2019/11/07/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    <id>https://onehr7.github.io/2019/11/07/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</id>
    <published>2019-11-07T06:48:00.000Z</published>
    <updated>2021-01-11T16:05:31.326Z</updated>
    
    <content type="html"><![CDATA[<h2 id="归并排序-Merge"><a href="#归并排序-Merge" class="headerlink" title="归并排序 (Merge)"></a>归并排序 (Merge)</h2><hr><hr><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><ul><li>通过分而治之的思想，将两个两个的有序子列进行归并</li><li>时间复杂度：稳定在nlogn</li><li>优点：稳定的算法</li><li>缺点：比较占用内存</li></ul><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.wang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-11-07 09:11</span></span><br><span class="line"><span class="comment"> * function_:归并排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        MergeSort m = <span class="keyword">new</span> MergeSort();</span><br><span class="line">        <span class="keyword">int</span>[] a = &#123;<span class="number">11</span>,<span class="number">44</span>,<span class="number">23</span>,<span class="number">67</span>,<span class="number">88</span>,<span class="number">65</span>,<span class="number">34</span>,<span class="number">48</span>,<span class="number">9</span>,<span class="number">12</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] tmp = <span class="keyword">new</span> <span class="keyword">int</span>[a.length];</span><br><span class="line">        m.mergeSort(a, <span class="number">0</span>, a.length - <span class="number">1</span>, tmp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n : a)&#123;</span><br><span class="line">            System.out.print(n + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> left, <span class="keyword">int</span> mid, <span class="keyword">int</span> right, <span class="keyword">int</span>[] tmp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> le = left;</span><br><span class="line">        <span class="keyword">int</span> m = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (le &lt;= mid &amp;&amp; m &lt;= right)&#123;</span><br><span class="line">            <span class="keyword">if</span> (a[le] &lt; a[m])&#123;</span><br><span class="line">                tmp[i++] = a[le++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                tmp[i++] = a[m++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当左右两边仍有剩余时</span></span><br><span class="line">        <span class="keyword">while</span> (le &lt;= mid)&#123;</span><br><span class="line">            tmp[i++] = a[le++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (m &lt;= right)&#123;</span><br><span class="line">            tmp[i++] = a[m++];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//复制回原数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)&#123;</span><br><span class="line">            a[left+j] = tmp[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> start, <span class="keyword">int</span> end,<span class="keyword">int</span>[] tmp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start &lt; end)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (start + end) / <span class="number">2</span>;</span><br><span class="line">            mergeSort(a, start, mid, tmp);</span><br><span class="line">            mergeSort(a, mid + <span class="number">1</span>, end, tmp);</span><br><span class="line">            merge(a, start, mid, end,tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul><li><a href="https://www.nowcoder.com/pat/5/problem/4037" title="Insert or Merge">Insert or Merge</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;归并排序-Merge&quot;&gt;&lt;a href=&quot;#归并排序-Merge&quot; class=&quot;headerlink&quot; title=&quot;归并排序 (Merge)&quot;&gt;&lt;/a&gt;归并排序 (Merge)&lt;/h2&gt;&lt;hr&gt;
&lt;hr&gt;
&lt;h3 id=&quot;实现原理&quot;&gt;&lt;a href=&quot;#实现原</summary>
      
    
    
    
    <category term="数据结构" scheme="https://onehr7.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="排序" scheme="https://onehr7.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>并发编程基础二</title>
    <link href="https://onehr7.github.io/2019/11/06/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%802/"/>
    <id>https://onehr7.github.io/2019/11/06/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%802/</id>
    <published>2019-11-06T11:21:00.000Z</published>
    <updated>2021-01-11T16:05:32.352Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java并发编程基础二"><a href="#Java并发编程基础二" class="headerlink" title="Java并发编程基础二"></a>Java并发编程基础二</h2><hr><hr><h4 id="1、多线程并发编程"><a href="#1、多线程并发编程" class="headerlink" title="1、多线程并发编程"></a>1、多线程并发编程</h4><ul><li>并发：同一时间段内多个任务同时执行，且执行没有结束</li><li>并行：单位时间内多个任务同时执行</li></ul><hr><h4 id="2、线程安全问题"><a href="#2、线程安全问题" class="headerlink" title="2、线程安全问题"></a>2、线程安全问题</h4><ul><li>只读不会出现问题，至少有一个线程进行修改</li><li>通常使用同步锁synchronized进行上锁</li></ul><hr><h4 id="3、共享变量的内存可见性问题"><a href="#3、共享变量的内存可见性问题" class="headerlink" title="3、共享变量的内存可见性问题"></a>3、共享变量的内存可见性问题</h4><ul><li>变量放在主内存中，线程使用变量时，会将主内存中变量复制到自己的工作空间，然后操作自己工作空间中的变量</li><li>通过volatile解决</li></ul><hr><h4 id="4、synchronized关键字"><a href="#4、synchronized关键字" class="headerlink" title="4、synchronized关键字"></a>4、synchronized关键字</h4><ul><li>当一个线程获取到这个锁后，其他线程必须等待该线程释放锁后才能获取该锁</li><li>使用synchronized就是将要使用的变量从工作内存中清除，直接从主存中获取变量</li><li>退出synchronized就是将本地内存修改的变量刷新到主存中</li><li>使用synchronized会导致上下文切换，增加调度开销<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> set（<span class="keyword">int</span> value）&#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="5、volatile关键字"><a href="#5、volatile关键字" class="headerlink" title="5、volatile关键字"></a>5、volatile关键字</h4><ul><li>确保对一个变量的更新对其他线程马上可见</li><li>从主内存中获取，修改后再刷新回主内存</li><li>不保证操作的原子性</li><li>适合的使用条件<ul><li>写入变量值不依赖变量当前值</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> value；</span><br></pre></td></tr></table></figure><hr><h4 id="6、原子性操作"><a href="#6、原子性操作" class="headerlink" title="6、原子性操作"></a>6、原子性操作</h4><ul><li>含义：执行一系列操作时，这些操作要么全执行，要么全不执行</li><li>保证原子性：通过synchronized关键字</li></ul><hr><h4 id="7、CAS操作"><a href="#7、CAS操作" class="headerlink" title="7、CAS操作"></a>7、CAS操作</h4><ul><li>锁的缺点：当线程没有获取到锁被阻塞时，会导致线程上下文切换和重新调度的开销</li><li>CAS：Compare and Swap，通过硬件保证原子性</li><li>boolean compareAndSwapLong（Object obj，long valueOffset，long expect，long update），参数为：对象内存位置、对象中变量的偏移量、变量预期值、新的值。如果对象obj中内存偏移量为valueOffset的变量值为expect，则使用新的值update替换expect</li></ul><h5 id="ABA问题"><a href="#ABA问题" class="headerlink" title="ABA问题"></a>ABA问题</h5><pre><code>- 线程1准备用CAS将变量的值由A替换为B，在此之前，线程2将变量的值由A替换为C，又由C替换为A，然后线程1执行CAS时发现变量的值仍然为A，所以CAS成功。但实际上这时的现场已经和最初不同了，尽管CAS成功，但可能存在潜藏的问题- 变量的状态值产生了环形转换     A-&gt;B,B-&gt;A- 避免：    + 1、变量的值只能朝一个方向转换    A-&gt;B,B-&gt;C    + 2、JDK中AtomicStampedReference类给每个变量状态值配备了时间戳</code></pre><hr><h4 id="8、Unsafe类"><a href="#8、Unsafe类" class="headerlink" title="8、Unsafe类"></a>8、Unsafe类</h4><hr><h4 id="9、Java指令重排序"><a href="#9、Java指令重排序" class="headerlink" title="9、Java指令重排序"></a>9、Java指令重排序</h4><hr><h4 id="10、伪共享"><a href="#10、伪共享" class="headerlink" title="10、伪共享"></a>10、伪共享</h4><hr><h4 id="11、锁"><a href="#11、锁" class="headerlink" title="11、锁"></a>11、锁</h4><h5 id="乐观锁和悲观锁"><a href="#乐观锁和悲观锁" class="headerlink" title="乐观锁和悲观锁"></a>乐观锁和悲观锁</h5><h5 id="公平锁和非公平锁"><a href="#公平锁和非公平锁" class="headerlink" title="公平锁和非公平锁"></a>公平锁和非公平锁</h5><h5 id="独占锁和共享锁"><a href="#独占锁和共享锁" class="headerlink" title="独占锁和共享锁"></a>独占锁和共享锁</h5><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Java并发编程基础二&quot;&gt;&lt;a href=&quot;#Java并发编程基础二&quot; class=&quot;headerlink&quot; title=&quot;Java并发编程基础二&quot;&gt;&lt;/a&gt;Java并发编程基础二&lt;/h2&gt;&lt;hr&gt;
&lt;hr&gt;
&lt;h4 id=&quot;1、多线程并发编程&quot;&gt;&lt;a href=</summary>
      
    
    
    
    <category term="Java并发" scheme="https://onehr7.github.io/categories/Java%E5%B9%B6%E5%8F%91/"/>
    
    
    <category term="并发" scheme="https://onehr7.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>PAT甲级20分总结</title>
    <link href="https://onehr7.github.io/2019/11/04/pat20/"/>
    <id>https://onehr7.github.io/2019/11/04/pat20/</id>
    <published>2019-11-04T04:14:00.000Z</published>
    <updated>2021-01-11T16:05:33.132Z</updated>
    
    <content type="html"><![CDATA[<h3 id="pat甲级20分"><a href="#pat甲级20分" class="headerlink" title="pat甲级20分"></a>pat甲级20分</h3><h4 id="通用模板"><a href="#通用模板" class="headerlink" title="通用模板"></a>通用模板</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io;</span><br><span class="line"><span class="comment">//import java.util;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><pre><code>String str；List&lt;E&gt; list = new ArrayList&lt;E&gt;();int num;</code></pre><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>br.readLine()</td><td>读取一行的数据，使用字符串接收</td></tr><tr><td>Integer.parseInt(str)</td><td>将字符串转换为int</td></tr><tr><td>list.add(obj)</td><td>向list中添加元素</td></tr><tr><td>list.contains(obj)</td><td>list中是否包含obj，存在返回true</td></tr><tr><td>list.get(i)</td><td>获取list中i位置的元素</td></tr><tr><td>list.indexOf(obj)</td><td>list中指定元素的索引</td></tr><tr><td>list.remove((String)str);</td><td>移除list中存在的第一个str</td></tr><tr><td>list.set(i，obj)</td><td>将list中i位置的元素设置为obj</td></tr><tr><td>list.size()</td><td>list的长度</td></tr><tr><td>Math.min(int a,int b)</td><td>求两数最小</td></tr><tr><td>Math.max(int a,int b)</td><td>求两数最大</td></tr><tr><td>Math.sqrt(int num)</td><td>求平方根</td></tr><tr><td>str.charAt(i)</td><td>字符串中指定位置的字符（char）</td></tr><tr><td>str.split()</td><td>通过正则表达式分割字符串，返回字符串数组</td></tr><tr><td>str.substring(int beginIndex,int endIndex)</td><td>返回字符串的子字符串</td></tr><tr><td>String.format(“%04d”,num)</td><td>不足四位时，在前方补零</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;pat甲级20分&quot;&gt;&lt;a href=&quot;#pat甲级20分&quot; class=&quot;headerlink&quot; title=&quot;pat甲级20分&quot;&gt;&lt;/a&gt;pat甲级20分&lt;/h3&gt;&lt;h4 id=&quot;通用模板&quot;&gt;&lt;a href=&quot;#通用模板&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="数据结构" scheme="https://onehr7.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="PAT" scheme="https://onehr7.github.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>PAT甲级解题</title>
    <link href="https://onehr7.github.io/2019/10/30/pat/"/>
    <id>https://onehr7.github.io/2019/10/30/pat/</id>
    <published>2019-10-30T14:11:00.000Z</published>
    <updated>2021-01-11T16:05:33.566Z</updated>
    
    <content type="html"><![CDATA[<h4 id="PAT甲级（JAVA）"><a href="#PAT甲级（JAVA）" class="headerlink" title="PAT甲级（JAVA）"></a>PAT甲级（JAVA）</h4><p><a href="https://github.com/OneSoil/PAT/tree/master/src">https://github.com/OneSoil/PAT/tree/master/src</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;PAT甲级（JAVA）&quot;&gt;&lt;a href=&quot;#PAT甲级（JAVA）&quot; class=&quot;headerlink&quot; title=&quot;PAT甲级（JAVA）&quot;&gt;&lt;/a&gt;PAT甲级（JAVA）&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/OneSoi</summary>
      
    
    
    
    <category term="数据结构" scheme="https://onehr7.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="PAT" scheme="https://onehr7.github.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>git常用操作</title>
    <link href="https://onehr7.github.io/2019/10/28/git/"/>
    <id>https://onehr7.github.io/2019/10/28/git/</id>
    <published>2019-10-28T14:11:00.000Z</published>
    <updated>2021-01-11T16:05:33.967Z</updated>
    
    <content type="html"><![CDATA[<h3 id="git常用操作"><a href="#git常用操作" class="headerlink" title="git常用操作"></a>git常用操作</h3><h4 id="本地项目同步到github"><a href="#本地项目同步到github" class="headerlink" title="本地项目同步到github"></a>本地项目同步到github</h4><pre><code>github上创建同名项目库git initgit add .git commit –m “”git remote add origin     https://github.com/OneSoil/PAT.git(项目地址)git push –u origin master (-f  强制push)</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;git常用操作&quot;&gt;&lt;a href=&quot;#git常用操作&quot; class=&quot;headerlink&quot; title=&quot;git常用操作&quot;&gt;&lt;/a&gt;git常用操作&lt;/h3&gt;&lt;h4 id=&quot;本地项目同步到github&quot;&gt;&lt;a href=&quot;#本地项目同步到github&quot; class</summary>
      
    
    
    
    <category term="指令" scheme="https://onehr7.github.io/categories/%E6%8C%87%E4%BB%A4/"/>
    
    
    <category term="git" scheme="https://onehr7.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>并发编程基础一</title>
    <link href="https://onehr7.github.io/2019/10/16/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    <id>https://onehr7.github.io/2019/10/16/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</id>
    <published>2019-10-16T15:21:00.000Z</published>
    <updated>2021-01-11T16:05:32.722Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java并发编程基础一"><a href="#Java并发编程基础一" class="headerlink" title="Java并发编程基础一"></a>Java并发编程基础一</h2><hr><hr><br/>#### 线程定义    线程是进程的一个执行路径，一个进程中至少有一个线程，进程中的多个线程共享进程的资源    线程中有程序计数器和栈，程序计数器记录要执行的指令地址，栈存放该线程的局部变量***<br/>#### 线程创建和运行##### 线程的创建<pre><code> 1. 实 现Runnable接口的run()方法 2. 继承Theread类，重写run方法 3. 使用FutureTask</code></pre><h5 id="三种方式比较"><a href="#三种方式比较" class="headerlink" title="三种方式比较"></a>三种方式比较</h5><pre><code>通过继承：方便传参，但不支持多继承通过Runnable：可以实现多接口，但不方便传参通过FutureTask：可以拿到任务的返回结果</code></pre><h5 id="线程的运行"><a href="#线程的运行" class="headerlink" title="线程的运行"></a>线程的运行</h5><blockquote><ul><li>通过继承Theread类，当调用了start()方法后才真正启动了线程</li><li>当run方法执行完毕后，线程就处于终止状态</li></ul></blockquote><hr><br/>#### 线程等待和通知##### wait()    * 调用wait前需获取当前变量监视器锁synchronized    * 使用wait后线程进入阻塞，并释放当前变量监视器锁虚假唤醒：没有使用notify()、notifyAll()，线程也从挂起状态转变为运行状态 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//预防虚假唤醒</span></span><br><span class="line"><span class="keyword">synchronized</span>(obj)&#123;</span><br><span class="line">    <span class="keyword">while</span> (条件不满足)&#123;</span><br><span class="line">        obj.wait（）；</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>##### wait(long timeout)    在指定时间挂起，超时后则结束并返回;    wait()方法执行的是wait(0);<h5 id="wait-long-timeout-int-nanos"><a href="#wait-long-timeout-int-nanos" class="headerlink" title="wait(long timeout,int nanos)"></a>wait(long timeout,int nanos)</h5><pre><code>在wait(long timeout)的基础上加入了纳秒级的额外时间</code></pre><h5 id="notify"><a href="#notify" class="headerlink" title="notify()"></a>notify()</h5><pre><code>唤醒一个在该共享变量上调用wait系列方法后被挂起的线程，若存在多个线程等待，则唤醒是随机的在唤醒前需获得其共享变量的监视器锁</code></pre><h5 id="notifyAll"><a href="#notifyAll" class="headerlink" title="notifyAll()"></a>notifyAll()</h5><pre><code>唤醒所有在该共享变量上调用了wait()方法后而被挂起的线程只能唤醒调用notifyAll前由于wait而挂起的线程</code></pre><hr><h4 id="4、等待线程执行终止"><a href="#4、等待线程执行终止" class="headerlink" title="4、等待线程执行终止"></a>4、等待线程执行终止</h4><h5 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h5><ul><li>通过Thread类直接提供</li><li>该方法无参无返回值</li></ul><hr><h4 id="5、sleep"><a href="#5、sleep" class="headerlink" title="5、sleep()"></a>5、sleep()</h4><ul><li>线程在睡眠时不会释放监视器资源</li></ul><hr><p>####6、 yield()</p><ul><li>让出CPU执行权</li><li>sleep()让自己阻塞起来，yield使自己处于就绪状态<br/></li></ul><hr><h4 id="7、线程中断方法"><a href="#7、线程中断方法" class="headerlink" title="7、线程中断方法"></a>7、线程中断方法</h4><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>void interrupt()</td><td>设置线程的中断标志。当阻塞时调用，会抛出InterruptedException异常</td></tr><tr><td>boolean isInterrupted()</td><td>检测当前线程是否被中断，是返回true</td></tr><tr><td>boolean interrupted()</td><td>检测当前线程是否被中断，是返回true，不过如果发现被中断，会清除中断标志</td></tr></tbody></table><hr><h4 id="8、线程上下文切换"><a href="#8、线程上下文切换" class="headerlink" title="8、线程上下文切换"></a>8、线程上下文切换</h4><ul><li>当前线程使用完时间片后，让出CPU供其他线程占用的过程</li><li>需要保存现场</li><li>切换时机<ul><li>当前线程的CPU时间片用完处于就绪状态</li><li>当前线程被其他线程中断时</li></ul></li></ul><hr><h4 id="9、线程死锁"><a href="#9、线程死锁" class="headerlink" title="9、线程死锁"></a>9、线程死锁</h4><ul><li>产生条件<ul><li>1.互斥条件</li><li>2.请求并持有条件</li><li>3.不可剥夺条件</li><li>4.环路等待条件<br/></li></ul></li><li>避免死锁<ul><li>破坏一个条件（请求并持有、环路等待）</li><li>使资源的申请有序性(使多个线程获取资源的顺序一致)</li></ul></li></ul><hr><h4 id="10、守护线程和用户线程"><a href="#10、守护线程和用户线程" class="headerlink" title="10、守护线程和用户线程"></a>10、守护线程和用户线程</h4><h5 id="守护线程daemon"><a href="#守护线程daemon" class="headerlink" title="守护线程daemon"></a>守护线程daemon</h5><ul><li>不影响JVM退出</li><li>通过daemonThread.setDaemon(true)设置守护线程<h5 id="用户线程user"><a href="#用户线程user" class="headerlink" title="用户线程user"></a>用户线程user</h5></li><li>所有用户线程结束时，JVM正常退出，如main函数</li></ul><hr><h4 id="11、ThreadLocal"><a href="#11、ThreadLocal" class="headerlink" title="11、ThreadLocal"></a>11、ThreadLocal</h4><ul><li>每个线程通过复制一个变量到自己的本地内存</li><li>创建<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ThreadLocal&lt;String&gt; localVariable = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Java并发编程基础一&quot;&gt;&lt;a href=&quot;#Java并发编程基础一&quot; class=&quot;headerlink&quot; title=&quot;Java并发编程基础一&quot;&gt;&lt;/a&gt;Java并发编程基础一&lt;/h2&gt;&lt;hr&gt;
&lt;hr&gt;
&lt;br/&gt;
#### 线程定义
    线程是进程的一</summary>
      
    
    
    
    <category term="Java并发" scheme="https://onehr7.github.io/categories/Java%E5%B9%B6%E5%8F%91/"/>
    
    
    <category term="并发" scheme="https://onehr7.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的深度</title>
    <link href="https://onehr7.github.io/2019/10/15/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6/"/>
    <id>https://onehr7.github.io/2019/10/15/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6/</id>
    <published>2019-10-15T07:13:33.000Z</published>
    <updated>2021-01-11T16:05:31.385Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度</p></blockquote><br/>#### 要点<ul><li>通过递归，比较左右结点最大深度</li><li>三元表达式  exception ？ result1 : result2<br/></li></ul><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">public class TreeNode &#123;</span></span><br><span class="line"><span class="comment">    int val = 0;</span></span><br><span class="line"><span class="comment">    TreeNode left = null;</span></span><br><span class="line"><span class="comment">    TreeNode right = null;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public TreeNode(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">TreeDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> left = TreeDepth(root.left);</span><br><span class="line">        <span class="keyword">int</span> right = TreeDepth(root.right);</span><br><span class="line">        <span class="keyword">return</span> left &gt; right ? left + <span class="number">1</span> : right + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长</summary>
      
    
    
    
    <category term="剑指offer" scheme="https://onehr7.github.io/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
    <category term="树" scheme="https://onehr7.github.io/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>连续子数组的最大和</title>
    <link href="https://onehr7.github.io/2019/09/05/%E8%BF%9E%E7%BB%AD%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%92%8C/"/>
    <id>https://onehr7.github.io/2019/09/05/%E8%BF%9E%E7%BB%AD%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%92%8C/</id>
    <published>2019-09-05T09:13:33.000Z</published>
    <updated>2021-01-11T16:05:30.646Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。给一个数组，返回它的最大连续子序列的和，你会不会被他忽悠住？(子向量的长度至少是1)</p></blockquote><br/>#### 问题分析<ul><li>通过遍历数组，一个一个进行处理</li><li>将第一个数记录为最大值</li><li>从第一个加到最后，当比最大值大时，更新最大值</li><li>当前和为负数时，则下个数为开始值</li></ul><br/><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">FindGreatestSumOfSubArray</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max = array[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> j = array[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">            System.out.println(max);</span><br><span class="line">            <span class="keyword">if</span>(j &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                j = array[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                j = j + array[i];</span><br><span class="line">            &#125;</span><br><span class="line">             </span><br><span class="line">            <span class="keyword">if</span>(max &lt; j)&#123;</span><br><span class="line">                    max = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的一维模</summary>
      
    
    
    
    <category term="剑指offer" scheme="https://onehr7.github.io/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
    <category term="数组" scheme="https://onehr7.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的镜像</title>
    <link href="https://onehr7.github.io/2019/09/05/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F/"/>
    <id>https://onehr7.github.io/2019/09/05/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F/</id>
    <published>2019-09-05T04:11:33.000Z</published>
    <updated>2021-01-11T16:05:32.763Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>操作给定的二叉树，将其变换为源二叉树的镜像</p></blockquote><br/>#### 问题分析<ul><li>将根节点通过递归，不断反转其左右子节点</li></ul><br/>#### 知识点<br/><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">public class TreeNode &#123;</span></span><br><span class="line"><span class="comment">    int val = 0;</span></span><br><span class="line"><span class="comment">    TreeNode left = null;</span></span><br><span class="line"><span class="comment">    TreeNode right = null;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">    public TreeNode(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Mirror</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        TreeNode tmp;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        tmp = root.left;</span><br><span class="line">        root.left = root.right;</span><br><span class="line">        root.right = tmp;</span><br><span class="line">        Mirror(root.left);</span><br><span class="line">        Mirror(root.right);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;操作给定的二叉树，将其变换为源二叉树的镜像&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br/&gt;
###</summary>
      
    
    
    
    <category term="剑指offer" scheme="https://onehr7.github.io/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
    <category term="树" scheme="https://onehr7.github.io/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>从尾到头打印链表</title>
    <link href="https://onehr7.github.io/2019/09/05/%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/"/>
    <id>https://onehr7.github.io/2019/09/05/%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/</id>
    <published>2019-09-05T03:07:33.000Z</published>
    <updated>2021-01-11T16:05:32.035Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>输入一个链表，按链表从尾到头的顺序返回一个ArrayList</p></blockquote><br/>#### 问题分析<ul><li>先将链表数据全部压入栈中</li><li>通过运用栈后入先出的性质</li><li>即可将数据反转</li></ul><br/>#### 知识点* ArrayList<Integer> list = new ArrayList<Integer>();* stack.push() || pop()* list.add(value);<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*    public class ListNode &#123;</span></span><br><span class="line"><span class="comment">*        int val;</span></span><br><span class="line"><span class="comment">*        ListNode next = null;</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*        ListNode(int val) &#123;</span></span><br><span class="line"><span class="comment">*            this.val = val;</span></span><br><span class="line"><span class="comment">*        &#125;</span></span><br><span class="line"><span class="comment">*    &#125;</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">printListFromTailToHead</span><span class="params">(ListNode listNode)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//将链表中的数据压入栈中</span></span><br><span class="line">        <span class="keyword">while</span>(listNode!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            stack.push(listNode.val);</span><br><span class="line">            listNode = listNode.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将栈中数据返回给ArrayList</span></span><br><span class="line">        <span class="keyword">while</span>(!stack.empty())&#123;</span><br><span class="line">            list.add(stack.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;输入一个链表，按链表从尾到头的顺序返回一个ArrayList&lt;/p&gt;
&lt;/blockquote&gt;
</summary>
      
    
    
    
    <category term="剑指offer" scheme="https://onehr7.github.io/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
    <category term="链表" scheme="https://onehr7.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>用两个栈实现队列</title>
    <link href="https://onehr7.github.io/2019/09/04/%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
    <id>https://onehr7.github.io/2019/09/04/%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</id>
    <published>2019-09-04T09:33:00.000Z</published>
    <updated>2021-01-11T16:05:30.986Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。</p></blockquote><br/>#### 问题分析- push    + 通过两个栈，两次颠倒顺序即可变为队列    ![avatar](/img/19_9_4.png)<ul><li>pop<ul><li>在push的基础上直接pop（）即可<br/></li></ul></li></ul><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    Stack&lt;Integer&gt; stack1 = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">    Stack&lt;Integer&gt; stack2 = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(!stack1.empty())&#123;</span><br><span class="line">            stack2.push(stack1.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        stack1.push(node);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(!stack2.empty())&#123;</span><br><span class="line">            stack1.push(stack2.pop());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stack1.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。&lt;/p&gt;
&lt;/</summary>
      
    
    
    
    <category term="剑指offer" scheme="https://onehr7.github.io/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
    <category term="队列" scheme="https://onehr7.github.io/tags/%E9%98%9F%E5%88%97/"/>
    
    <category term="栈" scheme="https://onehr7.github.io/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>替换空格</title>
    <link href="https://onehr7.github.io/2019/09/04/%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/"/>
    <id>https://onehr7.github.io/2019/09/04/%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/</id>
    <published>2019-09-04T09:14:00.000Z</published>
    <updated>2021-01-11T16:05:30.880Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。</p></blockquote><br/>#### 问题分析- 通过java字符串自带的方法实现<br/><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replaceSpace</span><span class="params">(StringBuffer str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str.toString().replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;%20&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy</summary>
      
    
    
    
    <category term="剑指offer" scheme="https://onehr7.github.io/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
    <category term="字符串" scheme="https://onehr7.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>hexo指令</title>
    <link href="https://onehr7.github.io/2019/07/27/hexo%E6%8C%87%E4%BB%A4/"/>
    <id>https://onehr7.github.io/2019/07/27/hexo%E6%8C%87%E4%BB%A4/</id>
    <published>2019-07-27T09:22:22.000Z</published>
    <updated>2021-01-11T16:05:33.640Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hexo指令"><a href="#hexo指令" class="headerlink" title="hexo指令"></a>hexo指令</h2><h5 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h5><pre><code>hexo ghexo shttp://localhost:4000/</code></pre><h5 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h5><pre><code>hexo cleanhexo ghexo d</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;hexo指令&quot;&gt;&lt;a href=&quot;#hexo指令&quot; class=&quot;headerlink&quot; title=&quot;hexo指令&quot;&gt;&lt;/a&gt;hexo指令&lt;/h2&gt;&lt;h5 id=&quot;预览&quot;&gt;&lt;a href=&quot;#预览&quot; class=&quot;headerlink&quot; title=&quot;预览&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="指令" scheme="https://onehr7.github.io/categories/%E6%8C%87%E4%BB%A4/"/>
    
    
    <category term="指令" scheme="https://onehr7.github.io/tags/%E6%8C%87%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>牛顿迭代法求平方根</title>
    <link href="https://onehr7.github.io/2019/07/27/%E7%89%9B%E9%A1%BF%E6%B3%95%E6%B1%82%E5%B9%B3%E6%96%B9%E6%A0%B9/"/>
    <id>https://onehr7.github.io/2019/07/27/%E7%89%9B%E9%A1%BF%E6%B3%95%E6%B1%82%E5%B9%B3%E6%96%B9%E6%A0%B9/</id>
    <published>2019-07-27T08:33:11.000Z</published>
    <updated>2021-01-11T16:05:30.805Z</updated>
    
    <content type="html"><![CDATA[<h2 id="x-的平方根"><a href="#x-的平方根" class="headerlink" title="x 的平方根"></a>x 的平方根</h2><h4 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h4><h5 id="牛顿迭代法"><a href="#牛顿迭代法" class="headerlink" title="牛顿迭代法"></a>牛顿迭代法</h5><ul><li>求x的平方根即求f(x)=x^2-a等于0的解，</li><li>通过点x的直线于曲线，在无限趋近于x的时候，直线与曲线近似相等</li><li>点x处切线交x轴于x0</li><li>作x0的垂线交曲线与(x0,f(x0))</li><li>通过反复迭代求得x的平方根近似值</li></ul><h4 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h4><p>实现 int sqrt(int x) 函数。<br/></p><p>计算并返回 x 的平方根，其中 x 是非负整数。<br/></p><p>由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。<br/></p>  <br/><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><pre><code>输入: 4输出: 2输入: 8输出: 2说明: 8 的平方根是 2.82842..., 由于返回类型是整数，小数部分将被舍去。  </code></pre><br/><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4> <br/><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mySqrt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">long</span> a = x;</span><br><span class="line">       <span class="keyword">while</span> (a * a &gt; x)&#123;</span><br><span class="line">           a = (a + x / a) / <span class="number">2</span> ;</span><br><span class="line">       &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>)a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;x-的平方根&quot;&gt;&lt;a href=&quot;#x-的平方根&quot; class=&quot;headerlink&quot; title=&quot;x 的平方根&quot;&gt;&lt;/a&gt;x 的平方根&lt;/h2&gt;&lt;h4 id=&quot;要点&quot;&gt;&lt;a href=&quot;#要点&quot; class=&quot;headerlink&quot; title=&quot;要点&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="数据结构" scheme="https://onehr7.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="二分查找" scheme="https://onehr7.github.io/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>queue</title>
    <link href="https://onehr7.github.io/2019/07/09/queue/"/>
    <id>https://onehr7.github.io/2019/07/09/queue/</id>
    <published>2019-07-09T15:21:00.000Z</published>
    <updated>2021-01-11T16:05:33.073Z</updated>
    
    <content type="html"><![CDATA[<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h3 id="循化队列"><a href="#循化队列" class="headerlink" title="循化队列"></a>循化队列</h3><ul><li><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCircularQueue</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] data;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> head;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tail;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Initialize your data structure here. Set the size of the queue to be k. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyCircularQueue</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        data = <span class="keyword">new</span> <span class="keyword">int</span>[k];</span><br><span class="line">        head = -<span class="number">1</span>;</span><br><span class="line">        tail = -<span class="number">1</span>;</span><br><span class="line">        size = k;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Insert an element into the circular queue. Return true if the operation is successful. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">enQueue</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull() == <span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty() == <span class="keyword">true</span>) &#123;</span><br><span class="line">            head = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        tail = (tail + <span class="number">1</span>) % size;</span><br><span class="line">        data[tail] = value;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Delete an element from the circular queue. Return true if the operation is successful. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty() == <span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (head == tail) &#123;</span><br><span class="line">            head = -<span class="number">1</span>;</span><br><span class="line">            tail = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        head = (head + <span class="number">1</span>) % size;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Get the front item from the queue. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Front</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty() == <span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data[head];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Get the last item from the queue. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Rear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty() == <span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data[tail];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Checks whether the circular queue is empty or not. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> head == -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Checks whether the circular queue is full or not. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ((tail + <span class="number">1</span>) % size) == head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyCircularQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyCircularQueue obj = new MyCircularQueue(k);</span></span><br><span class="line"><span class="comment"> * boolean param_1 = obj.enQueue(value);</span></span><br><span class="line"><span class="comment"> * boolean param_2 = obj.deQueue();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.Front();</span></span><br><span class="line"><span class="comment"> * int param_4 = obj.Rear();</span></span><br><span class="line"><span class="comment"> * boolean param_5 = obj.isEmpty();</span></span><br><span class="line"><span class="comment"> * boolean param_6 = obj.isFull();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><ul><li><h5 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h5><ul><li>在插入时，必须先判断full，再判断empty，因为empty会改变head的值。</li><li>使用取余操作避免数组溢出<br><br></li></ul></li></ul><h3 id="Java-队列api"><a href="#Java-队列api" class="headerlink" title="Java 队列api"></a>Java 队列api</h3><hr><h4 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h4><ul><li><strong>boolean add (E e)</strong></li></ul><pre><code> 将指定的元素插入此队列（如果立即可行且不会违反容量限制），在成功时返回 true，如果当前没有可用的空间，则抛出 IllegalStateException</code></pre><br><ul><li><strong>boolean offer (E e)</strong></li></ul><pre><code> 将指定的元素插入此队列（如果立即可行且不会违反容量限制），当使用有容量限制的队列时，此方法通常要优于 add(E)，后者可能无法插入元素，而只是抛出一个异常</code></pre><ul><li><strong>区别</strong></li></ul><ul><li> add抛出异常</li><li>offer直接返回false<br></li></ul><hr><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><ul><li><strong>E remove()</strong></li></ul><pre><code> 获取并移除此队列的头。此方法与 poll 唯一的不同在于：此队列为空时将抛出一个异常</code></pre><br><ul><li><strong>E poll()</strong></li></ul><pre><code>获取并移除此队列的头，如果此队列为空，则返回 null </code></pre><br><hr><h4 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h4><ul><li><strong>E element()</strong></li></ul><pre><code>获取，但是不移除此队列的头。此方法与 peek 唯一的不同在于：此队列为空时将抛出一个异常</code></pre><br><ul><li><strong>E peek()</strong></li></ul><pre><code>获取但不移除此队列的头；如果此队列为空，则返回 null</code></pre><br>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;队列&quot;&gt;&lt;a href=&quot;#队列&quot; class=&quot;headerlink&quot; title=&quot;队列&quot;&gt;&lt;/a&gt;队列&lt;/h2&gt;&lt;h3 id=&quot;循化队列&quot;&gt;&lt;a href=&quot;#循化队列&quot; class=&quot;headerlink&quot; title=&quot;循化队列&quot;&gt;&lt;/a&gt;循化队列&lt;/h</summary>
      
    
    
    
    <category term="数据结构" scheme="https://onehr7.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="队列" scheme="https://onehr7.github.io/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>二维数组中的查找</title>
    <link href="https://onehr7.github.io/2019/07/09/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/"/>
    <id>https://onehr7.github.io/2019/07/09/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</id>
    <published>2019-07-09T15:21:00.000Z</published>
    <updated>2021-01-11T16:05:31.621Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p></blockquote><br/>#### 问题分析- 通过左下角(第一列最大，最后一行最小)与target进行比较;- 左下角下标为array[array.length][0]，行最大为array[0].length;- 若target较大，则向右移一位- 若target较小，则向上移一位<br/><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> target, <span class="keyword">int</span> [][] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(array == <span class="keyword">null</span>||array.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> bottom = array.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> right = array[<span class="number">0</span>].length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(bottom &gt;= <span class="number">0</span> &amp;&amp; left &lt;= right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(target &gt; array[bottom][left])&#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target &lt; array[bottom][left])&#123;</span><br><span class="line">                bottom--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到</summary>
      
    
    
    
    <category term="剑指offer" scheme="https://onehr7.github.io/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
    <category term="数组" scheme="https://onehr7.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
</feed>
