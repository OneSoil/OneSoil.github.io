<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WHR blogs</title>
  
  <subtitle>Less hesitation, More action</subtitle>
  <link href="https://onehr7.github.io/atom.xml" rel="self"/>
  
  <link href="https://onehr7.github.io/"/>
  <updated>2021-01-19T15:26:01.085Z</updated>
  <id>https://onehr7.github.io/</id>
  
  <author>
    <name>Hairui Wang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python剑指27 - 二叉树的镜像</title>
    <link href="https://onehr7.github.io/2021/01/19/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F/"/>
    <id>https://onehr7.github.io/2021/01/19/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F/</id>
    <published>2021-01-19T14:54:00.000Z</published>
    <updated>2021-01-19T15:26:01.085Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://leetcode-cn.com/problems/er-cha-shu-de-jing-xiang-lcof/">题目来源</a></p></blockquote><ul><li><p>描述</p><p>请完成一个函数，输入一个二叉树，该函数输出它的镜像。</p><p>例如输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">       4</span><br><span class="line">     &#x2F;   \</span><br><span class="line">    2     7</span><br><span class="line">   &#x2F; \   &#x2F; \</span><br><span class="line">1   3 6   9</span><br></pre></td></tr></table></figure><p>镜像输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">     4</span><br><span class="line">   &#x2F;   \</span><br><span class="line">  7     2</span><br><span class="line"> &#x2F; \   &#x2F; \</span><br><span class="line">9   6 3   1</span><br></pre></td></tr></table></figure><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root &#x3D; [4,2,7,1,3,6,9]</span><br><span class="line">输出：[4,7,2,9,6,3,1]</span><br></pre></td></tr></table></figure></li></ul><ul><li>分析</li></ul><ol><li><p>使用递归解决，分别递归左右子节点，结束条件为root为空。每次递归时交换当前节点的左右子节点。</p><p>时间复杂度：O(N)</p><p>空间复杂度：O(N)</p></li></ol><ol start="2"><li><p>使用迭代</p><p>将所有节点放入列表，并交换每个节点的左右子节点</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mirrorTree</span>(<span class="params">self, root: TreeNode</span>) -&gt; TreeNode:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        root.left, root.right = root.right, root.left</span><br><span class="line">        self.mirrorTree(root.left)</span><br><span class="line">        self.mirrorTree(root.right)</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 迭代</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mirrorTree</span>(<span class="params">self, root: TreeNode</span>) -&gt; TreeNode:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        node_list = [root]</span><br><span class="line">        <span class="keyword">while</span> node_list:</span><br><span class="line">            cur_node = node_list.pop()</span><br><span class="line">            <span class="keyword">if</span> cur_node.left:</span><br><span class="line">                node_list.append(cur_node.left)</span><br><span class="line">            <span class="keyword">if</span> cur_node.right:</span><br><span class="line">                node_list.append(cur_node.right)</span><br><span class="line">            cur_node.left, cur_node.right =  cur_node.right, cur_node.left</span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/er-cha-shu-de-jing-xiang-lcof/&quot;&gt;题目来源&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;描述&lt;/p&gt;
&lt;p&gt;请</summary>
      
    
    
    
    <category term="剑指offer" scheme="https://onehr7.github.io/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
    <category term="树" scheme="https://onehr7.github.io/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>并查集及Python实现</title>
    <link href="https://onehr7.github.io/2021/01/18/%E5%B9%B6%E6%9F%A5%E9%9B%86%E5%8F%8APython%E5%AE%9E%E7%8E%B0/"/>
    <id>https://onehr7.github.io/2021/01/18/%E5%B9%B6%E6%9F%A5%E9%9B%86%E5%8F%8APython%E5%AE%9E%E7%8E%B0/</id>
    <published>2021-01-18T12:22:00.000Z</published>
    <updated>2021-01-18T14:54:04.449Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>并查集：在计算机科学中，<strong>并查集</strong>是一种树型的<strong>数据结构</strong>，用于处理一些<strong>不交集</strong>（Disjoint Sets）的合并及查询问题。   —wiki</p></blockquote><a id="more"></a><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>​    并查集，顾名思义，包含了<strong>合并</strong>和<strong>查询</strong>操作，用于解决动态连通性问题。</p><h4 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主体框架</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查询根节点</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 合并节点</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">union</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断两个节点是否连通</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_same_set</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li><p>初始化</p><p>将所有节点的父节点设为None</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, M</span>):</span></span><br><span class="line">self.father_dict = &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 记录集合的数量，一般为返回值</span></span><br><span class="line">    self.nums_set = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(M)):</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> self.father_dict:</span><br><span class="line">        self.father_dict[i] = <span class="literal">None</span></span><br><span class="line">            <span class="comment"># 集合的数量+1</span></span><br><span class="line">            self.nums_set += <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>查询</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span>(<span class="params">self, x</span>):</span></span><br><span class="line">root = x</span><br><span class="line">    <span class="keyword">while</span> self.father_dict[root] != <span class="literal">None</span>:</span><br><span class="line">        root = self.father_dict[root]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 路径压缩</span></span><br><span class="line">    <span class="keyword">while</span> x != root:</span><br><span class="line">        cur_father = self.father_dict[x]</span><br><span class="line">        self.father_dict[x] = root</span><br><span class="line">        x = cur_father</span><br><span class="line">    <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure></li><li><p>合并</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">union</span>(<span class="params">self, a, b</span>):</span></span><br><span class="line">a_root, b_root = self.find(a), self.find(b)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 任意指定一个节点为父节点</span></span><br><span class="line">    <span class="keyword">if</span> a_root != b_root:</span><br><span class="line">        self.father_dict[a_root] = b_root</span><br><span class="line">        self.nums_set -= <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>判断是否在同一集合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_same_set</span>(<span class="params">self, a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> self.find(a) == self.find(b)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;并查集：在计算机科学中，&lt;strong&gt;并查集&lt;/strong&gt;是一种树型的&lt;strong&gt;数据结构&lt;/strong&gt;，用于处理一些&lt;strong&gt;不交集&lt;/strong&gt;（Disjoint Sets）的合并及查询问题。   —wiki&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="数据结构" scheme="https://onehr7.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="并查集" scheme="https://onehr7.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>比较两个dataframe的差异</title>
    <link href="https://onehr7.github.io/2021/01/18/%E6%AF%94%E8%BE%83%E4%B8%A4%E4%B8%AAdataframe%E7%9A%84%E5%B7%AE%E5%BC%82/"/>
    <id>https://onehr7.github.io/2021/01/18/%E6%AF%94%E8%BE%83%E4%B8%A4%E4%B8%AAdataframe%E7%9A%84%E5%B7%AE%E5%BC%82/</id>
    <published>2021-01-18T05:00:00.000Z</published>
    <updated>2021-01-18T14:52:52.332Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考来源：<a href="https://stackoverflow.com/questions/20225110/comparing-two-dataframes-and-getting-the-differences">https://stackoverflow.com/questions/20225110/comparing-two-dataframes-and-getting-the-differences</a></p></blockquote><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 合并两个dataframe</span></span><br><span class="line">df = pd.concat([df1, df2])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重设索引，并防止将旧索引转为列</span></span><br><span class="line">df = df.reset_index(drop=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按相同值分组</span></span><br><span class="line">df_gpby = df.groupby(<span class="built_in">list</span>(df.columns))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取唯一值的索引</span></span><br><span class="line">idx = [x[<span class="number">0</span>] <span class="keyword">for</span> x <span class="keyword">in</span> df_gpby.groups.values() <span class="keyword">if</span> <span class="built_in">len</span>(x) == <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取出包含唯一值的记录</span></span><br><span class="line">df.reindex(idx)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;参考来源：&lt;a href=&quot;https://stackoverflow.com/questions/20225110/comparing-two-dataframes-and-getting-the-differences&quot;&gt;https://stackoverflow.com/questions/20225110/comparing-two-dataframes-and-getting-the-differences&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="python" scheme="https://onehr7.github.io/categories/python/"/>
    
    
    <category term="pandas" scheme="https://onehr7.github.io/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>pandas浅析</title>
    <link href="https://onehr7.github.io/2021/01/07/pandas%E6%80%BB%E7%BB%93/"/>
    <id>https://onehr7.github.io/2021/01/07/pandas%E6%80%BB%E7%BB%93/</id>
    <published>2021-01-07T05:18:50.000Z</published>
    <updated>2021-01-17T08:27:16.482Z</updated>
    
    <content type="html"><![CDATA[<h4 id="创建DataFrame"><a href="#创建DataFrame" class="headerlink" title="创建DataFrame"></a>创建DataFrame</h4><p>​    <a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><ol><li><p>读取csv文件并转为DataFrame</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">csv_data = pd.read_csv(<span class="string">&quot;test_data.csv&quot;</span>, encoding = <span class="string">&quot;ISO-8859-1&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>字典转为DataFrame</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;col1&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>], <span class="string">&#x27;col2&#x27;</span>: [<span class="number">3</span>, <span class="number">4</span>]&#125;</span><br><span class="line">   df = pd.DataFrame(data=d)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="right"></th><th align="right">col1</th><th align="right"><strong>col2</strong></th></tr></thead><tbody><tr><td align="right">0</td><td align="right">1</td><td align="right">3</td></tr><tr><td align="right">1</td><td align="right">2</td><td align="right">4</td></tr></tbody></table></li><li><p>双层列表转为DataFrame</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data = [[<span class="string">&#x27;tom&#x27;</span>, <span class="number">10</span>], [<span class="string">&#x27;nick&#x27;</span>, <span class="number">15</span>], [<span class="string">&#x27;juli&#x27;</span>, <span class="number">14</span>]] </span><br><span class="line"></span><br><span class="line"><span class="comment"># Create the pandas DataFrame </span></span><br><span class="line">df = pd.DataFrame(data, columns = [<span class="string">&#x27;Name&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>]) </span><br></pre></td></tr></table></figure><table><thead><tr><th align="right"></th><th align="right">Name</th><th align="right">Age</th></tr></thead><tbody><tr><td align="right">0</td><td align="right">tom</td><td align="right">10</td></tr><tr><td align="right">1</td><td align="right">nick</td><td align="right">15</td></tr><tr><td align="right">2</td><td align="right">juli</td><td align="right">14</td></tr></tbody></table></li><li><p>列表字典转DataFrame</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data = [&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;, </span><br><span class="line">        &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">10</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">30</span>&#125;] </span><br><span class="line"></span><br><span class="line"><span class="comment"># Creates DataFrame. </span></span><br><span class="line">df = pd.DataFrame(data) </span><br></pre></td></tr></table></figure><table><thead><tr><th align="right"></th><th align="right">a</th><th align="right">b</th><th align="right">c</th></tr></thead><tbody><tr><td align="right">0</td><td align="right">1</td><td align="right">2</td><td align="right">3</td></tr><tr><td align="right">1</td><td align="right">10</td><td align="right">20</td><td align="right">30</td></tr></tbody></table></li><li><p>指定index</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(data, index =[<span class="string">&#x27;rank1&#x27;</span>, </span><br><span class="line">                                <span class="string">&#x27;rank2&#x27;</span>, </span><br><span class="line">                                <span class="string">&#x27;rank3&#x27;</span>, </span><br><span class="line">                                <span class="string">&#x27;rank4&#x27;</span>])</span><br></pre></td></tr></table></figure></li></ol><h4 id="修改DataFrame值"><a href="#修改DataFrame值" class="headerlink" title="修改DataFrame值"></a>修改DataFrame值</h4><ol><li><p>修改一列的值</p>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&quot;data&quot;</span>] = df[<span class="string">&quot;data&quot;</span>].<span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="number">0</span>)</span><br></pre></td></tr></table></figure></li><li><p>修改多列的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> index, row <span class="keyword">in</span> df_res.iterrows():</span><br><span class="line">    df_res.at[index, <span class="string">&#x27;data1&#x27;</span>] = <span class="number">0</span></span><br><span class="line">    df_res.at[index, <span class="string">&#x27;data2&#x27;</span>] = <span class="number">0</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><ol><li><p>整体转为str</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = df.astype(<span class="built_in">str</span>)</span><br></pre></td></tr></table></figure></li><li><p>整体转为int</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = df.astype(<span class="built_in">int</span>)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;创建DataFrame&quot;&gt;&lt;a href=&quot;#创建DataFrame&quot; class=&quot;headerlink&quot; title=&quot;创建DataFrame&quot;&gt;&lt;/a&gt;创建DataFrame&lt;/h4&gt;&lt;p&gt;​</summary>
    
    
    
    <category term="python" scheme="https://onehr7.github.io/categories/python/"/>
    
    
    <category term="pandas" scheme="https://onehr7.github.io/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>Python装饰器实现日志输出</title>
    <link href="https://onehr7.github.io/2020/11/20/Python%E8%A3%85%E9%A5%B0%E5%99%A8%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA/"/>
    <id>https://onehr7.github.io/2020/11/20/Python%E8%A3%85%E9%A5%B0%E5%99%A8%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA/</id>
    <published>2020-11-20T04:18:02.000Z</published>
    <updated>2021-01-14T15:57:38.757Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2020/11/20 11:33</span></span><br><span class="line"><span class="comment"># @Author  : Wanghairui</span></span><br><span class="line"><span class="comment"># @function:</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_create_logger</span>():</span></span><br><span class="line">    logger = logging.getLogger(<span class="string">&#x27;LogError&#x27;</span>)</span><br><span class="line">    logger.setLevel(logging.ERROR)</span><br><span class="line">    file_handler = logging.FileHandler(<span class="string">r&#x27;./MJlogs.log&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    log_format = <span class="string">&#x27;%(levelname)s %(asctime)s %(message)s&#x27;</span></span><br><span class="line">    formatter = logging.Formatter(log_format)</span><br><span class="line">    file_handler.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line">    logger.addHandler(file_handler)</span><br><span class="line">    <span class="keyword">return</span> logger</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logged</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_logging</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logger = _create_logger()</span><br><span class="line">            error_msg = <span class="string">&#x27;And error has occurred at /&#x27;</span> + func.__name__ + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">            logger.exception(error_msg)</span><br><span class="line">            <span class="keyword">return</span> e</span><br><span class="line">    <span class="keyword">return</span> do_logging</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="python" scheme="https://onehr7.github.io/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python虚拟环境配置</title>
    <link href="https://onehr7.github.io/2020/11/16/Python%E4%BD%BF%E7%94%A8Virtualenv%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%20/"/>
    <id>https://onehr7.github.io/2020/11/16/Python%E4%BD%BF%E7%94%A8Virtualenv%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%20/</id>
    <published>2020-11-16T14:56:28.000Z</published>
    <updated>2021-01-14T15:58:34.479Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Python-配置Windows10-virtualenv环境"><a href="#Python-配置Windows10-virtualenv环境" class="headerlink" title="Python 配置Windows10 virtualenv环境"></a>Python 配置Windows10 virtualenv环境</h4><ol><li><p>安装 virtualenv</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenv</span><br></pre></td></tr></table></figure></li><li><p>切换到项目目录下，创建虚拟环境</p><blockquote><p>virtualenv -p python解释器 虚拟环境名</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv -p python testenv</span><br></pre></td></tr></table></figure></li><li><p>进入虚拟环境下的Scripts</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd testenv/Scripts</span><br></pre></td></tr></table></figure></li><li><p>使用虚拟环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">activate</span><br></pre></td></tr></table></figure></li><li><p>安装requirements.txt所需的模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure></li><li><p>退出虚拟环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Python-配置Windows10-virtualenv环境&quot;&gt;&lt;a href=&quot;#Python-配置Windows10-virtualenv环境&quot; class=&quot;headerlink&quot; title=&quot;Python 配置Windows10 virtualenv环</summary>
      
    
    
    
    <category term="python" scheme="https://onehr7.github.io/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python生产者消费者模型</title>
    <link href="https://onehr7.github.io/2020/11/06/Python%20%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B/"/>
    <id>https://onehr7.github.io/2020/11/06/Python%20%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B/</id>
    <published>2020-11-06T15:12:05.000Z</published>
    <updated>2021-01-14T15:59:30.534Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadProductorConsumer</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化模型</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 大小为15的缓冲池，用于容纳产品</span></span><br><span class="line">        self.q = queue.Queue(<span class="number">15</span>)</span><br><span class="line">        self.screen_lock = threading.Semaphore(value=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">productor</span>(<span class="params">self, product</span>):</span></span><br><span class="line">        <span class="comment"># 生产者不停的每3秒生产一个产品</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            self.q.put(product)</span><br><span class="line">            cur_time = time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>, time.localtime(time.time()))</span><br><span class="line">            cur_name = threading.current_thread().name</span><br><span class="line">            <span class="comment"># print是线程不安全的,需要信号量确保没有冲突</span></span><br><span class="line">            self.screen_lock.acquire()</span><br><span class="line">            print(cur_time+<span class="string">&quot;  &quot;</span> + cur_name + <span class="string">&quot; 生产了一个产品&quot;</span>, sep=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            self.screen_lock.release()</span><br><span class="line">            time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">consumer</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 消费者不停的每2秒消费一个产品</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            self.q.get()</span><br><span class="line">            cur_time = time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>, time.localtime(time.time()))</span><br><span class="line">            cur_name = threading.current_thread().name</span><br><span class="line">            self.screen_lock.acquire()</span><br><span class="line">            print(cur_time + <span class="string">&quot;  &quot;</span> + cur_name + <span class="string">&quot; 消费了一个产品&quot;</span>, sep=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            self.screen_lock.release()</span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tpc = ThreadProductorConsumer()</span><br><span class="line"></span><br><span class="line">    p = <span class="string">&quot;product&quot;</span></span><br><span class="line">    <span class="comment"># 实例化了3个生产者</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        t = threading.Thread(target=tpc.productor, args=(p,))</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实例化了6个消费者</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        v = threading.Thread(target=tpc.consumer)</span><br><span class="line">        v.start()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="python" scheme="https://onehr7.github.io/categories/python/"/>
    
    
    <category term="并发" scheme="https://onehr7.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript浅析</title>
    <link href="https://onehr7.github.io/2020/10/27/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://onehr7.github.io/2020/10/27/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-10-27T08:08:37.000Z</published>
    <updated>2021-01-14T16:00:19.489Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、数据类型"><a href="#一、数据类型" class="headerlink" title="一、数据类型"></a>一、数据类型</h2><ul><li><p>Number :</p><ul><li>整数，浮点数，NaN（Not a Number）,Infinity（无限大）</li><li>NaN 与任何值都不相同，包括自己，可通过isNaN()函数判断NaN</li></ul></li><li><p><strong>字符串</strong></p><ul><li><p>多行字符串：``</p></li><li><p>模板字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;小明&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> message = <span class="string">`你好, <span class="subst">$&#123;name&#125;</span>, 你今年<span class="subst">$&#123;age&#125;</span>岁了!`</span>;</span><br><span class="line">alert(message);</span><br></pre></td></tr></table></figure></li><li><p>字符串操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&#x27;Hello, world!&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// length获取长度</span></span><br><span class="line">s.length; <span class="comment">// 13</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取指定位置字符</span></span><br><span class="line">s[<span class="number">0</span>]; <span class="comment">// &#x27;H&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// toUpperCase() 字符串全转为大写</span></span><br><span class="line"><span class="comment">// toLowerCase() 字符串全转为小写</span></span><br><span class="line"><span class="comment">// indexOf()搜索指定字符串出现的位置</span></span><br><span class="line">s.indexOf(<span class="string">&#x27;world&#x27;</span>); <span class="comment">// 返回7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//substring()返回指定索引区间的子串</span></span><br><span class="line">s.substring(<span class="number">0</span>, <span class="number">5</span>); <span class="comment">// 从索引0开始到5（不包括5），返回&#x27;hello&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>字符串不可变</p></li></ul></li><li><p>布尔值</p></li><li><p>null和undefined，大多数情况下，使用null而不是undefined</p></li></ul><h2 id="二、运算符"><a href="#二、运算符" class="headerlink" title="二、运算符"></a>二、运算符</h2><ul><li><p>==：比较时会自动转换数据类型</p></li><li><p>===：只比较数据类型一致的数据</p></li></ul><h2 id="三、数组"><a href="#三、数组" class="headerlink" title="三、数组"></a>三、数组</h2><ul><li><p>同一数组可以包含不同数据类型</p></li><li><p>数组操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//length 获取数组的长度,给length赋值将导致数组长度变化</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3.14</span>, <span class="string">&#x27;Hello&#x27;</span>, <span class="literal">null</span>, <span class="literal">true</span>];</span><br><span class="line">arr.length; <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// indexOf 搜索一个指定的元素的位置</span></span><br><span class="line">arr.indexOf(<span class="number">2</span>); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//切片 slice 截取数组的部分元素，返回一个新的数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>];</span><br><span class="line">arr.slice(<span class="number">0</span>, <span class="number">3</span>); <span class="comment">// 从索引0开始，到索引3结束，但不包括索引3: [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]</span></span><br><span class="line">arr.slice(<span class="number">3</span>); <span class="comment">// 从索引3开始到结束: [&#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;, &#x27;G&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aCopy = arr.slice(); <span class="comment">// 复制数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//push() 向数组添加若干元素</span></span><br><span class="line"><span class="comment">//pop() 删除最后一个元素</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">arr.push(<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>); <span class="comment">// 返回Array新的长度: 4</span></span><br><span class="line">arr; <span class="comment">// [1, 2, &#x27;A&#x27;, &#x27;B&#x27;]</span></span><br><span class="line">arr.pop(); <span class="comment">// pop()返回&#x27;B&#x27;</span></span><br><span class="line">arr; <span class="comment">// [1, 2, &#x27;A&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//unshift() 向数组头部添加若干元素</span></span><br><span class="line"><span class="comment">// shift() 删除数组的第一个元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//sort() 对数组进行排序，默认顺序</span></span><br><span class="line"><span class="comment">//reverse() 反转数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//splice()从指定的索引开始删除若干元素，然后再从该位置添加若干元素</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;Microsoft&#x27;</span>, <span class="string">&#x27;Apple&#x27;</span>, <span class="string">&#x27;Yahoo&#x27;</span>, <span class="string">&#x27;AOL&#x27;</span>, <span class="string">&#x27;Excite&#x27;</span>, <span class="string">&#x27;Oracle&#x27;</span>];</span><br><span class="line"><span class="comment">// 从索引2开始删除3个元素,然后再添加两个元素:</span></span><br><span class="line">arr.splice(<span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Facebook&#x27;</span>); <span class="comment">// 返回删除的元素 [&#x27;Yahoo&#x27;, &#x27;AOL&#x27;, &#x27;Excite&#x27;]</span></span><br><span class="line">arr; <span class="comment">// [&#x27;Microsoft&#x27;, &#x27;Apple&#x27;, &#x27;Google&#x27;, &#x27;Facebook&#x27;, &#x27;Oracle&#x27;]</span></span><br><span class="line"><span class="comment">// 只删除,不添加:</span></span><br><span class="line">arr.splice(<span class="number">2</span>, <span class="number">2</span>); <span class="comment">// [&#x27;Google&#x27;, &#x27;Facebook&#x27;]</span></span><br><span class="line">arr; <span class="comment">// [&#x27;Microsoft&#x27;, &#x27;Apple&#x27;, &#x27;Oracle&#x27;]</span></span><br><span class="line"><span class="comment">// 只添加,不删除:</span></span><br><span class="line">arr.splice(<span class="number">2</span>, <span class="number">0</span>, <span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Facebook&#x27;</span>); <span class="comment">// 返回[],因为没有删除任何元素</span></span><br><span class="line">arr; <span class="comment">// [&#x27;Microsoft&#x27;, &#x27;Apple&#x27;, &#x27;Google&#x27;, &#x27;Facebook&#x27;, &#x27;Oracle&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//concat() 将两个数组连接起来，返回一个新数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>];</span><br><span class="line">arr.concat(<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]); <span class="comment">// [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, 1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//join() 把当前数组的每个元素都用指定的字符串连接起来，然后返回连接后的字符串</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.join(<span class="string">&#x27;-&#x27;</span>); <span class="comment">// &#x27;A-B-C-1-2-3&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="四、对象"><a href="#四、对象" class="headerlink" title="四、对象"></a>四、对象</h2><ul><li><p>类似于Python的字典    </p></li><li><p>获取对象属性：对象变量.属性名，person.name</p></li><li><p>判断是否包含某个属性：</p><p>in操作符：继承的属性也算</p><p>hasOwnProperty(): 不包含继承的属性</p></li></ul><h2 id="五、strict模式"><a href="#五、strict模式" class="headerlink" title="五、strict模式"></a>五、strict模式</h2><blockquote><p>如果一个变量没有通过var声明就使用，则该变量就自动被声明为全局变量</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//启用strict</span></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="六、map和set"><a href="#六、map和set" class="headerlink" title="六、map和set"></a>六、map和set</h2><ul><li><p>map</p><blockquote><p>代替对象存储键值数据，具有极快的查询速度</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">m.set(<span class="string">&#x27;Adam&#x27;</span>, <span class="number">67</span>);</span><br><span class="line"><span class="comment">// 覆盖掉上面的Adam值</span></span><br><span class="line">m.set(<span class="string">&#x27;Adam&#x27;</span>, <span class="number">88</span>);</span><br><span class="line">m.get(<span class="string">&#x27;Adam&#x27;</span>); <span class="comment">// 88</span></span><br></pre></td></tr></table></figure></li><li><p>set</p><blockquote><p>只存值，且值不会重复</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重复元素被过滤</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="string">&#x27;3&#x27;</span>]);</span><br><span class="line">s; <span class="comment">// Set &#123;1, 2, 3, &quot;3&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以重复添加，但不会有效果</span></span><br><span class="line">s.add(<span class="number">4</span>);</span><br><span class="line">s; <span class="comment">// Set &#123;1, 2, 3, 4&#125;</span></span><br><span class="line">s.add(<span class="number">4</span>);</span><br><span class="line">s; <span class="comment">// Set &#123;1, 2, 3, 4&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="七、常用方法"><a href="#七、常用方法" class="headerlink" title="七、常用方法"></a>七、常用方法</h2><ul><li><p>forEach()</p><blockquote><p>ES5.1标准引入,用于遍历可迭代对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;C&#x27;</span>]</span><br><span class="line">a.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value,index</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// map,参数分别为值，键和map</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="number">1</span>, <span class="string">&#x27;x&#x27;</span>], [<span class="number">2</span>, <span class="string">&#x27;y&#x27;</span>], [<span class="number">3</span>, <span class="string">&#x27;z&#x27;</span>]]);</span><br><span class="line">m.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value, key, map</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// set,Set与Array类似，但Set没有索引，因此回调函数的前两个参数都是元素本身</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>]);</span><br><span class="line">s.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">element, sameElement, set</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(element);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="八、函数"><a href="#八、函数" class="headerlink" title="八、函数"></a>八、函数</h2><ul><li><p>匿名函数：<code>function (x) &#123; ... &#125;</code></p></li><li><p>可以传入多于或少于函数定义的参数的个数</p></li><li><p>关键字arguments：将传入的参数保存为类似于Array</p></li><li><p>rest参数：rest参数写在最后，前面用<code>...</code>标识，用于将多出的参数保存到Array中</p></li><li><p>let关键字：用于声明局部变量，所声明的变量，只在<code>let</code>命令所在的代码块内有效</p></li><li><p>const: <code>const</code>来定义常量，<code>const</code>与<code>let</code>都具有块级作用域</p></li><li><p>解构赋值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接对多个变量同时赋值</span></span><br><span class="line"><span class="keyword">var</span> [x, y, z] = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;JavaScript&#x27;</span>, <span class="string">&#x27;ES6&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> [x, [y, z]] = [<span class="string">&#x27;hello&#x27;</span>, [<span class="string">&#x27;JavaScript&#x27;</span>, <span class="string">&#x27;ES6&#x27;</span>]];</span><br><span class="line"><span class="keyword">let</span> [, , z] = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;JavaScript&#x27;</span>, <span class="string">&#x27;ES6&#x27;</span>]; <span class="comment">// 忽略前两个元素，只对z赋值第三个元素</span></span><br></pre></td></tr></table></figure></li><li><p>闭包：返回值为函数的函数</p></li><li><p>箭头函数：相当于匿名函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(x, y) =&gt; x * x + y * y</span><br><span class="line"></span><br><span class="line">x =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x * x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> - x * x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="九、需要注意的点"><a href="#九、需要注意的点" class="headerlink" title="九、需要注意的点"></a>九、需要注意的点</h2><ul><li>JavaScript引擎在行末自动添加分号</li><li>全局变量会绑定到<code>window</code>上，不同的JavaScript文件如果使用了相同的全局变量，或者定义了相同名字的顶层函数，都会造成命名冲突，并且很难被发现</li><li>返回闭包时，返回函数不要引用任何循环变量，或者后续会发生变化的变量</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、数据类型&quot;&gt;&lt;a href=&quot;#一、数据类型&quot; class=&quot;headerlink&quot; title=&quot;一、数据类型&quot;&gt;&lt;/a&gt;一、数据类型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Number :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;整数，浮点数，NaN（Not a Number</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://onehr7.github.io/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>Flask Vue跨域配置</title>
    <link href="https://onehr7.github.io/2020/10/27/%E9%85%8D%E7%BD%AEFlask+Vue%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/"/>
    <id>https://onehr7.github.io/2020/10/27/%E9%85%8D%E7%BD%AEFlask+Vue%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/</id>
    <published>2020-10-27T00:59:18.000Z</published>
    <updated>2021-01-14T16:01:25.282Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h4 id="配置Flask"><a href="#配置Flask" class="headerlink" title="配置Flask"></a>配置Flask</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装flask_cors</span></span><br><span class="line">pip install flask_cors</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask_cors <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#全局配置</span></span><br><span class="line">CORS(app, supports_credentials=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li></ul><ul><li><h4 id="配置Vue"><a href="#配置Vue" class="headerlink" title="配置Vue"></a>配置Vue</h4><p>1.找到config目录下的index.js，在proxyTable下添加配置信息:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line"> target: <span class="string">&#x27;http://localhost:5000/&#x27;</span>,<span class="comment">//后端接口地址</span></span><br><span class="line"> changeOrigin: <span class="literal">true</span>,<span class="comment">//是否允许跨越</span></span><br><span class="line"> pathRewrite: &#123;</span><br><span class="line">  <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;http://localhost:5000/&#x27;</span> <span class="comment">//路径重写</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/9403344-10e8372429b51b34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt="proxyTable配置.png"></p><p>2.在axios中，请求地址改为：’api/xxx/xxx’<br><img src="https://upload-images.jianshu.io/upload_images/9403344-aaa1a996feda6586.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="url.png"></p><p>至此，跨域问题解决。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;配置Flask&quot;&gt;&lt;a href=&quot;#配置Flask&quot; class=&quot;headerlink&quot; title=&quot;配置Flask&quot;&gt;&lt;/a&gt;配置Flask&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;</summary>
      
    
    
    
    <category term="python" scheme="https://onehr7.github.io/categories/python/"/>
    
    
    <category term="Web" scheme="https://onehr7.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>asyncio.Semaphore控制协程并发量</title>
    <link href="https://onehr7.github.io/2020/10/14/Python%E4%BD%BF%E7%94%A8asyncio.Semaphore%E6%8E%A7%E5%88%B6%E5%8D%8F%E7%A8%8B%E5%B9%B6%E5%8F%91%E9%87%8F/"/>
    <id>https://onehr7.github.io/2020/10/14/Python%E4%BD%BF%E7%94%A8asyncio.Semaphore%E6%8E%A7%E5%88%B6%E5%8D%8F%E7%A8%8B%E5%B9%B6%E5%8F%91%E9%87%8F/</id>
    <published>2020-10-14T12:29:26.000Z</published>
    <updated>2021-01-18T14:57:24.202Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2020/10/12 12:03</span></span><br><span class="line"><span class="comment"># @Author  : Wanghairui</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 控制并发数 20</span></span><br><span class="line">    sem = asyncio.Semaphore(<span class="number">20</span>)</span><br><span class="line">    tasks = [asyncio.create_task(print_something(<span class="string">&quot;c&quot;</span>+<span class="built_in">str</span>(i), sem)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">60</span>)]</span><br><span class="line">    start = time.perf_counter()</span><br><span class="line">    <span class="keyword">await</span> asyncio.gather(*tasks)</span><br><span class="line">    print(<span class="string">&quot;运行结束&quot;</span>)</span><br><span class="line">    res = [t.result() <span class="keyword">for</span> t <span class="keyword">in</span> tasks]</span><br><span class="line">    print(res)</span><br><span class="line">    elapsed = (time.perf_counter() - start)</span><br><span class="line">    print(elapsed)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">print_something</span>(<span class="params">thing, sem</span>):</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> sem:</span><br><span class="line">        print(thing)</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;A&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    asyncio.run(main())</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="python" scheme="https://onehr7.github.io/categories/python/"/>
    
    
    <category term="协程" scheme="https://onehr7.github.io/tags/%E5%8D%8F%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Python常用脚本</title>
    <link href="https://onehr7.github.io/2020/04/22/Python%20%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC/"/>
    <id>https://onehr7.github.io/2020/04/22/Python%20%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC/</id>
    <published>2020-04-22T04:30:23.000Z</published>
    <updated>2021-01-14T15:56:33.573Z</updated>
    
    <content type="html"><![CDATA[<h3 id="计算文本文件中的行数"><a href="#计算文本文件中的行数" class="headerlink" title="计算文本文件中的行数"></a>计算文本文件中的行数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;F:\data\12.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    count = <span class="number">1</span></span><br><span class="line">    line = f.readline()</span><br><span class="line">    <span class="keyword">while</span> line:</span><br><span class="line">        count = count + <span class="number">1</span></span><br><span class="line">        line = f.readline()</span><br><span class="line">print(count)</span><br></pre></td></tr></table></figure><br/><h3 id="去除文本的空行"><a href="#去除文本的空行" class="headerlink" title="去除文本的空行"></a>去除文本的空行</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">file1 = <span class="built_in">open</span>(<span class="string">r&#x27;F:\data\11.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="comment"># 要去掉空行的文件</span></span><br><span class="line">file2 = <span class="built_in">open</span>(<span class="string">r&quot;F:\data\12.txt&quot;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="comment"># 生成没有空行的文件</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file1.readlines():</span><br><span class="line">        <span class="keyword">if</span> line == <span class="string">&#x27;\n&#x27;</span>:</span><br><span class="line">            line = line.strip(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        file2.write(line)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    file1.close()</span><br><span class="line">    file2.close()</span><br></pre></td></tr></table></figure><br/><h3 id="分割字符串，避免”XXXA-B-C-D-XXX”被-分割"><a href="#分割字符串，避免”XXXA-B-C-D-XXX”被-分割" class="headerlink" title="分割字符串，避免”XXXA,B,C,D-XXX”被(,)分割"></a>分割字符串，避免”XXXA,B,C,D-XXX”被(,)分割</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单独取出要避免的字符串</span></span><br><span class="line"><span class="built_in">str</span> = re.findall(<span class="string">r&quot;\&quot;(.+?)\&quot;&quot;</span>, line)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用(~)替换要避免的字符串中的(,)</span></span><br><span class="line">strs = strs.replace(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;~&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用(#)代替所有字符串中(,)</span></span><br><span class="line">line = line.replace(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把要避免的字符串中的(~)换回(,)</span></span><br><span class="line">strs = strs.replace(<span class="string">&#x27;~&#x27;</span>, <span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将strs替换回长字符串</span></span><br><span class="line">line = re.sub(<span class="string">r&quot;\&quot;(.+?)\&quot;&quot;</span>, strs, line)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据（#）进行分割</span></span><br><span class="line">line_list = line.split(<span class="string">&quot;#&quot;</span>)</span><br></pre></td></tr></table></figure><br/>  <h3 id="将列表字符串转为列表"><a href="#将列表字符串转为列表" class="headerlink" title="将列表字符串转为列表"></a>将列表字符串转为列表</h3><blockquote><p>列表中字符串必须被双引号包裹</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">list_test = <span class="string">&#x27;[&quot;wang&quot;,&quot;hai&quot;,&quot;rui&quot;]&#x27;</span></span><br><span class="line">list_test = json.loads(list_test)</span><br></pre></td></tr></table></figure><br/>  <h3 id="Python-发送邮件"><a href="#Python-发送邮件" class="headerlink" title="Python 发送邮件"></a>Python 发送邮件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_notice</span>(<span class="params">content, subject=<span class="string">&quot;邮件主题&quot;</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第三方 SMTP 服务</span></span><br><span class="line">    mail_host = <span class="string">&quot;smtp.qq.com&quot;</span>  <span class="comment"># 设置服务器</span></span><br><span class="line">    mail_user = <span class="string">&quot;4145xx491@qq.com&quot;</span>  <span class="comment"># 用户名</span></span><br><span class="line">    mail_pass = <span class="string">&quot;xxxxxxx&quot;</span>  <span class="comment"># 口令</span></span><br><span class="line"></span><br><span class="line">    sender = <span class="string">&#x27;414528491@qq.com&#x27;</span></span><br><span class="line">    receivers = [<span class="string">&#x27;xxxx@metajoy.io&#x27;</span>]  <span class="comment"># 接收邮件</span></span><br><span class="line"></span><br><span class="line">    message = MIMEText(content, <span class="string">&#x27;plain&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    message[<span class="string">&#x27;From&#x27;</span>] = Header(<span class="string">&quot;sys&quot;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    message[<span class="string">&#x27;To&#x27;</span>] = Header(<span class="string">&quot;wanghairui&quot;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    message[<span class="string">&#x27;Subject&#x27;</span>] = Header(subject, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        smtpObj = smtplib.SMTP()</span><br><span class="line">        smtpObj.connect(mail_host, <span class="number">25</span>)</span><br><span class="line">        smtpObj.login(mail_user, mail_pass)</span><br><span class="line">        smtpObj.sendmail(sender, receivers, message.as_string())</span><br><span class="line">        print(<span class="string">&quot;邮件发送成功&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> smtplib.SMTPException <span class="keyword">as</span> e:</span><br><span class="line">        logging.exception(e)</span><br><span class="line">        print(<span class="string">&quot;Error: 无法发送邮件&quot;</span>)</span><br></pre></td></tr></table></figure><br/><h3 id="Requests不使用代理"><a href="#Requests不使用代理" class="headerlink" title="Requests不使用代理"></a>Requests不使用代理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">proxies = &#123;<span class="string">&#x27;http&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;https&#x27;</span>: <span class="literal">None</span>&#125;</span><br><span class="line">respon= requests.post(url, headers=header, data=param_form, proxies=proxies)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;计算文本文件中的行数&quot;&gt;&lt;a href=&quot;#计算文本文件中的行数&quot; class=&quot;headerlink&quot; title=&quot;计算文本文件中的行数&quot;&gt;&lt;/a&gt;计算文本文件中的行数&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;</summary>
      
    
    
    
    <category term="python" scheme="https://onehr7.github.io/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>插入排序</title>
    <link href="https://onehr7.github.io/2019/11/07/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    <id>https://onehr7.github.io/2019/11/07/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</id>
    <published>2019-11-07T07:28:00.000Z</published>
    <updated>2021-01-11T16:05:32.072Z</updated>
    
    <content type="html"><![CDATA[<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><hr><hr><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><ul><li>从序列中不断取出元素，插入已排序的序列中</li><li>时间复杂度：最好O(N),最坏O(N^2)</li></ul><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.wang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-11-07 15:07</span></span><br><span class="line"><span class="comment"> * function_:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span> [] list)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; list.length; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = list[i];</span><br><span class="line">            <span class="keyword">int</span> k;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将比现在大的元素向后移</span></span><br><span class="line">            <span class="keyword">for</span>(k = i; k &gt; <span class="number">0</span> &amp;&amp; list[k-<span class="number">1</span>] &gt; tmp; k--)&#123;</span><br><span class="line">                list[k] = list[k - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            list[k] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> [] list = &#123;<span class="number">29</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">37</span>,<span class="number">14</span>&#125;;</span><br><span class="line">        insertSort(list);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> a : list)&#123;</span><br><span class="line">            System.out.print(a+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;插入排序&quot;&gt;&lt;a href=&quot;#插入排序&quot; class=&quot;headerlink&quot; title=&quot;插入排序&quot;&gt;&lt;/a&gt;插入排序&lt;/h2&gt;&lt;hr&gt;
&lt;hr&gt;
&lt;h3 id=&quot;实现原理&quot;&gt;&lt;a href=&quot;#实现原理&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="数据结构" scheme="https://onehr7.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="排序" scheme="https://onehr7.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>归并排序</title>
    <link href="https://onehr7.github.io/2019/11/07/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    <id>https://onehr7.github.io/2019/11/07/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</id>
    <published>2019-11-07T06:48:00.000Z</published>
    <updated>2021-01-11T16:05:31.326Z</updated>
    
    <content type="html"><![CDATA[<h2 id="归并排序-Merge"><a href="#归并排序-Merge" class="headerlink" title="归并排序 (Merge)"></a>归并排序 (Merge)</h2><hr><hr><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><ul><li>通过分而治之的思想，将两个两个的有序子列进行归并</li><li>时间复杂度：稳定在nlogn</li><li>优点：稳定的算法</li><li>缺点：比较占用内存</li></ul><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.wang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-11-07 09:11</span></span><br><span class="line"><span class="comment"> * function_:归并排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        MergeSort m = <span class="keyword">new</span> MergeSort();</span><br><span class="line">        <span class="keyword">int</span>[] a = &#123;<span class="number">11</span>,<span class="number">44</span>,<span class="number">23</span>,<span class="number">67</span>,<span class="number">88</span>,<span class="number">65</span>,<span class="number">34</span>,<span class="number">48</span>,<span class="number">9</span>,<span class="number">12</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] tmp = <span class="keyword">new</span> <span class="keyword">int</span>[a.length];</span><br><span class="line">        m.mergeSort(a, <span class="number">0</span>, a.length - <span class="number">1</span>, tmp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n : a)&#123;</span><br><span class="line">            System.out.print(n + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> left, <span class="keyword">int</span> mid, <span class="keyword">int</span> right, <span class="keyword">int</span>[] tmp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> le = left;</span><br><span class="line">        <span class="keyword">int</span> m = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (le &lt;= mid &amp;&amp; m &lt;= right)&#123;</span><br><span class="line">            <span class="keyword">if</span> (a[le] &lt; a[m])&#123;</span><br><span class="line">                tmp[i++] = a[le++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                tmp[i++] = a[m++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当左右两边仍有剩余时</span></span><br><span class="line">        <span class="keyword">while</span> (le &lt;= mid)&#123;</span><br><span class="line">            tmp[i++] = a[le++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (m &lt;= right)&#123;</span><br><span class="line">            tmp[i++] = a[m++];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//复制回原数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)&#123;</span><br><span class="line">            a[left+j] = tmp[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> start, <span class="keyword">int</span> end,<span class="keyword">int</span>[] tmp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start &lt; end)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (start + end) / <span class="number">2</span>;</span><br><span class="line">            mergeSort(a, start, mid, tmp);</span><br><span class="line">            mergeSort(a, mid + <span class="number">1</span>, end, tmp);</span><br><span class="line">            merge(a, start, mid, end,tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul><li><a href="https://www.nowcoder.com/pat/5/problem/4037" title="Insert or Merge">Insert or Merge</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;归并排序-Merge&quot;&gt;&lt;a href=&quot;#归并排序-Merge&quot; class=&quot;headerlink&quot; title=&quot;归并排序 (Merge)&quot;&gt;&lt;/a&gt;归并排序 (Merge)&lt;/h2&gt;&lt;hr&gt;
&lt;hr&gt;
&lt;h3 id=&quot;实现原理&quot;&gt;&lt;a href=&quot;#实现原</summary>
      
    
    
    
    <category term="数据结构" scheme="https://onehr7.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="排序" scheme="https://onehr7.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>并发编程基础二</title>
    <link href="https://onehr7.github.io/2019/11/06/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%802/"/>
    <id>https://onehr7.github.io/2019/11/06/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%802/</id>
    <published>2019-11-06T11:21:00.000Z</published>
    <updated>2021-01-11T16:05:32.352Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java并发编程基础二"><a href="#Java并发编程基础二" class="headerlink" title="Java并发编程基础二"></a>Java并发编程基础二</h2><hr><hr><h4 id="1、多线程并发编程"><a href="#1、多线程并发编程" class="headerlink" title="1、多线程并发编程"></a>1、多线程并发编程</h4><ul><li>并发：同一时间段内多个任务同时执行，且执行没有结束</li><li>并行：单位时间内多个任务同时执行</li></ul><hr><h4 id="2、线程安全问题"><a href="#2、线程安全问题" class="headerlink" title="2、线程安全问题"></a>2、线程安全问题</h4><ul><li>只读不会出现问题，至少有一个线程进行修改</li><li>通常使用同步锁synchronized进行上锁</li></ul><hr><h4 id="3、共享变量的内存可见性问题"><a href="#3、共享变量的内存可见性问题" class="headerlink" title="3、共享变量的内存可见性问题"></a>3、共享变量的内存可见性问题</h4><ul><li>变量放在主内存中，线程使用变量时，会将主内存中变量复制到自己的工作空间，然后操作自己工作空间中的变量</li><li>通过volatile解决</li></ul><hr><h4 id="4、synchronized关键字"><a href="#4、synchronized关键字" class="headerlink" title="4、synchronized关键字"></a>4、synchronized关键字</h4><ul><li>当一个线程获取到这个锁后，其他线程必须等待该线程释放锁后才能获取该锁</li><li>使用synchronized就是将要使用的变量从工作内存中清除，直接从主存中获取变量</li><li>退出synchronized就是将本地内存修改的变量刷新到主存中</li><li>使用synchronized会导致上下文切换，增加调度开销<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> set（<span class="keyword">int</span> value）&#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="5、volatile关键字"><a href="#5、volatile关键字" class="headerlink" title="5、volatile关键字"></a>5、volatile关键字</h4><ul><li>确保对一个变量的更新对其他线程马上可见</li><li>从主内存中获取，修改后再刷新回主内存</li><li>不保证操作的原子性</li><li>适合的使用条件<ul><li>写入变量值不依赖变量当前值</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> value；</span><br></pre></td></tr></table></figure><hr><h4 id="6、原子性操作"><a href="#6、原子性操作" class="headerlink" title="6、原子性操作"></a>6、原子性操作</h4><ul><li>含义：执行一系列操作时，这些操作要么全执行，要么全不执行</li><li>保证原子性：通过synchronized关键字</li></ul><hr><h4 id="7、CAS操作"><a href="#7、CAS操作" class="headerlink" title="7、CAS操作"></a>7、CAS操作</h4><ul><li>锁的缺点：当线程没有获取到锁被阻塞时，会导致线程上下文切换和重新调度的开销</li><li>CAS：Compare and Swap，通过硬件保证原子性</li><li>boolean compareAndSwapLong（Object obj，long valueOffset，long expect，long update），参数为：对象内存位置、对象中变量的偏移量、变量预期值、新的值。如果对象obj中内存偏移量为valueOffset的变量值为expect，则使用新的值update替换expect</li></ul><h5 id="ABA问题"><a href="#ABA问题" class="headerlink" title="ABA问题"></a>ABA问题</h5><pre><code>- 线程1准备用CAS将变量的值由A替换为B，在此之前，线程2将变量的值由A替换为C，又由C替换为A，然后线程1执行CAS时发现变量的值仍然为A，所以CAS成功。但实际上这时的现场已经和最初不同了，尽管CAS成功，但可能存在潜藏的问题- 变量的状态值产生了环形转换     A-&gt;B,B-&gt;A- 避免：    + 1、变量的值只能朝一个方向转换    A-&gt;B,B-&gt;C    + 2、JDK中AtomicStampedReference类给每个变量状态值配备了时间戳</code></pre><hr><h4 id="8、Unsafe类"><a href="#8、Unsafe类" class="headerlink" title="8、Unsafe类"></a>8、Unsafe类</h4><hr><h4 id="9、Java指令重排序"><a href="#9、Java指令重排序" class="headerlink" title="9、Java指令重排序"></a>9、Java指令重排序</h4><hr><h4 id="10、伪共享"><a href="#10、伪共享" class="headerlink" title="10、伪共享"></a>10、伪共享</h4><hr><h4 id="11、锁"><a href="#11、锁" class="headerlink" title="11、锁"></a>11、锁</h4><h5 id="乐观锁和悲观锁"><a href="#乐观锁和悲观锁" class="headerlink" title="乐观锁和悲观锁"></a>乐观锁和悲观锁</h5><h5 id="公平锁和非公平锁"><a href="#公平锁和非公平锁" class="headerlink" title="公平锁和非公平锁"></a>公平锁和非公平锁</h5><h5 id="独占锁和共享锁"><a href="#独占锁和共享锁" class="headerlink" title="独占锁和共享锁"></a>独占锁和共享锁</h5><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Java并发编程基础二&quot;&gt;&lt;a href=&quot;#Java并发编程基础二&quot; class=&quot;headerlink&quot; title=&quot;Java并发编程基础二&quot;&gt;&lt;/a&gt;Java并发编程基础二&lt;/h2&gt;&lt;hr&gt;
&lt;hr&gt;
&lt;h4 id=&quot;1、多线程并发编程&quot;&gt;&lt;a href=</summary>
      
    
    
    
    <category term="Java并发" scheme="https://onehr7.github.io/categories/Java%E5%B9%B6%E5%8F%91/"/>
    
    
    <category term="并发" scheme="https://onehr7.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>git常用操作</title>
    <link href="https://onehr7.github.io/2019/10/28/git/"/>
    <id>https://onehr7.github.io/2019/10/28/git/</id>
    <published>2019-10-28T14:11:00.000Z</published>
    <updated>2021-01-11T16:05:33.967Z</updated>
    
    <content type="html"><![CDATA[<h3 id="git常用操作"><a href="#git常用操作" class="headerlink" title="git常用操作"></a>git常用操作</h3><h4 id="本地项目同步到github"><a href="#本地项目同步到github" class="headerlink" title="本地项目同步到github"></a>本地项目同步到github</h4><pre><code>github上创建同名项目库git initgit add .git commit –m “”git remote add origin     https://github.com/OneSoil/PAT.git(项目地址)git push –u origin master (-f  强制push)</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;git常用操作&quot;&gt;&lt;a href=&quot;#git常用操作&quot; class=&quot;headerlink&quot; title=&quot;git常用操作&quot;&gt;&lt;/a&gt;git常用操作&lt;/h3&gt;&lt;h4 id=&quot;本地项目同步到github&quot;&gt;&lt;a href=&quot;#本地项目同步到github&quot; class</summary>
      
    
    
    
    <category term="指令" scheme="https://onehr7.github.io/categories/%E6%8C%87%E4%BB%A4/"/>
    
    
    <category term="git" scheme="https://onehr7.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>并发编程基础一</title>
    <link href="https://onehr7.github.io/2019/10/16/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    <id>https://onehr7.github.io/2019/10/16/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</id>
    <published>2019-10-16T15:21:00.000Z</published>
    <updated>2021-01-11T16:05:32.722Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java并发编程基础一"><a href="#Java并发编程基础一" class="headerlink" title="Java并发编程基础一"></a>Java并发编程基础一</h2><hr><hr><br/>#### 线程定义    线程是进程的一个执行路径，一个进程中至少有一个线程，进程中的多个线程共享进程的资源    线程中有程序计数器和栈，程序计数器记录要执行的指令地址，栈存放该线程的局部变量***<br/>#### 线程创建和运行##### 线程的创建<pre><code> 1. 实 现Runnable接口的run()方法 2. 继承Theread类，重写run方法 3. 使用FutureTask</code></pre><h5 id="三种方式比较"><a href="#三种方式比较" class="headerlink" title="三种方式比较"></a>三种方式比较</h5><pre><code>通过继承：方便传参，但不支持多继承通过Runnable：可以实现多接口，但不方便传参通过FutureTask：可以拿到任务的返回结果</code></pre><h5 id="线程的运行"><a href="#线程的运行" class="headerlink" title="线程的运行"></a>线程的运行</h5><blockquote><ul><li>通过继承Theread类，当调用了start()方法后才真正启动了线程</li><li>当run方法执行完毕后，线程就处于终止状态</li></ul></blockquote><hr><br/>#### 线程等待和通知##### wait()    * 调用wait前需获取当前变量监视器锁synchronized    * 使用wait后线程进入阻塞，并释放当前变量监视器锁虚假唤醒：没有使用notify()、notifyAll()，线程也从挂起状态转变为运行状态 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//预防虚假唤醒</span></span><br><span class="line"><span class="keyword">synchronized</span>(obj)&#123;</span><br><span class="line">    <span class="keyword">while</span> (条件不满足)&#123;</span><br><span class="line">        obj.wait（）；</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>##### wait(long timeout)    在指定时间挂起，超时后则结束并返回;    wait()方法执行的是wait(0);<h5 id="wait-long-timeout-int-nanos"><a href="#wait-long-timeout-int-nanos" class="headerlink" title="wait(long timeout,int nanos)"></a>wait(long timeout,int nanos)</h5><pre><code>在wait(long timeout)的基础上加入了纳秒级的额外时间</code></pre><h5 id="notify"><a href="#notify" class="headerlink" title="notify()"></a>notify()</h5><pre><code>唤醒一个在该共享变量上调用wait系列方法后被挂起的线程，若存在多个线程等待，则唤醒是随机的在唤醒前需获得其共享变量的监视器锁</code></pre><h5 id="notifyAll"><a href="#notifyAll" class="headerlink" title="notifyAll()"></a>notifyAll()</h5><pre><code>唤醒所有在该共享变量上调用了wait()方法后而被挂起的线程只能唤醒调用notifyAll前由于wait而挂起的线程</code></pre><hr><h4 id="4、等待线程执行终止"><a href="#4、等待线程执行终止" class="headerlink" title="4、等待线程执行终止"></a>4、等待线程执行终止</h4><h5 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h5><ul><li>通过Thread类直接提供</li><li>该方法无参无返回值</li></ul><hr><h4 id="5、sleep"><a href="#5、sleep" class="headerlink" title="5、sleep()"></a>5、sleep()</h4><ul><li>线程在睡眠时不会释放监视器资源</li></ul><hr><p>####6、 yield()</p><ul><li>让出CPU执行权</li><li>sleep()让自己阻塞起来，yield使自己处于就绪状态<br/></li></ul><hr><h4 id="7、线程中断方法"><a href="#7、线程中断方法" class="headerlink" title="7、线程中断方法"></a>7、线程中断方法</h4><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>void interrupt()</td><td>设置线程的中断标志。当阻塞时调用，会抛出InterruptedException异常</td></tr><tr><td>boolean isInterrupted()</td><td>检测当前线程是否被中断，是返回true</td></tr><tr><td>boolean interrupted()</td><td>检测当前线程是否被中断，是返回true，不过如果发现被中断，会清除中断标志</td></tr></tbody></table><hr><h4 id="8、线程上下文切换"><a href="#8、线程上下文切换" class="headerlink" title="8、线程上下文切换"></a>8、线程上下文切换</h4><ul><li>当前线程使用完时间片后，让出CPU供其他线程占用的过程</li><li>需要保存现场</li><li>切换时机<ul><li>当前线程的CPU时间片用完处于就绪状态</li><li>当前线程被其他线程中断时</li></ul></li></ul><hr><h4 id="9、线程死锁"><a href="#9、线程死锁" class="headerlink" title="9、线程死锁"></a>9、线程死锁</h4><ul><li>产生条件<ul><li>1.互斥条件</li><li>2.请求并持有条件</li><li>3.不可剥夺条件</li><li>4.环路等待条件<br/></li></ul></li><li>避免死锁<ul><li>破坏一个条件（请求并持有、环路等待）</li><li>使资源的申请有序性(使多个线程获取资源的顺序一致)</li></ul></li></ul><hr><h4 id="10、守护线程和用户线程"><a href="#10、守护线程和用户线程" class="headerlink" title="10、守护线程和用户线程"></a>10、守护线程和用户线程</h4><h5 id="守护线程daemon"><a href="#守护线程daemon" class="headerlink" title="守护线程daemon"></a>守护线程daemon</h5><ul><li>不影响JVM退出</li><li>通过daemonThread.setDaemon(true)设置守护线程<h5 id="用户线程user"><a href="#用户线程user" class="headerlink" title="用户线程user"></a>用户线程user</h5></li><li>所有用户线程结束时，JVM正常退出，如main函数</li></ul><hr><h4 id="11、ThreadLocal"><a href="#11、ThreadLocal" class="headerlink" title="11、ThreadLocal"></a>11、ThreadLocal</h4><ul><li>每个线程通过复制一个变量到自己的本地内存</li><li>创建<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ThreadLocal&lt;String&gt; localVariable = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Java并发编程基础一&quot;&gt;&lt;a href=&quot;#Java并发编程基础一&quot; class=&quot;headerlink&quot; title=&quot;Java并发编程基础一&quot;&gt;&lt;/a&gt;Java并发编程基础一&lt;/h2&gt;&lt;hr&gt;
&lt;hr&gt;
&lt;br/&gt;
#### 线程定义
    线程是进程的一</summary>
      
    
    
    
    <category term="Java并发" scheme="https://onehr7.github.io/categories/Java%E5%B9%B6%E5%8F%91/"/>
    
    
    <category term="并发" scheme="https://onehr7.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的深度</title>
    <link href="https://onehr7.github.io/2019/10/15/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6/"/>
    <id>https://onehr7.github.io/2019/10/15/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6/</id>
    <published>2019-10-15T07:13:33.000Z</published>
    <updated>2021-01-11T16:05:31.385Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度</p></blockquote><br/>#### 要点<ul><li>通过递归，比较左右结点最大深度</li><li>三元表达式  exception ？ result1 : result2<br/></li></ul><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">public class TreeNode &#123;</span></span><br><span class="line"><span class="comment">    int val = 0;</span></span><br><span class="line"><span class="comment">    TreeNode left = null;</span></span><br><span class="line"><span class="comment">    TreeNode right = null;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public TreeNode(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">TreeDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> left = TreeDepth(root.left);</span><br><span class="line">        <span class="keyword">int</span> right = TreeDepth(root.right);</span><br><span class="line">        <span class="keyword">return</span> left &gt; right ? left + <span class="number">1</span> : right + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长</summary>
      
    
    
    
    <category term="剑指offer" scheme="https://onehr7.github.io/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
    <category term="树" scheme="https://onehr7.github.io/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>连续子数组的最大和</title>
    <link href="https://onehr7.github.io/2019/09/05/%E8%BF%9E%E7%BB%AD%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%92%8C/"/>
    <id>https://onehr7.github.io/2019/09/05/%E8%BF%9E%E7%BB%AD%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%92%8C/</id>
    <published>2019-09-05T09:13:33.000Z</published>
    <updated>2021-01-11T16:05:30.646Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。给一个数组，返回它的最大连续子序列的和，你会不会被他忽悠住？(子向量的长度至少是1)</p></blockquote><br/>#### 问题分析<ul><li>通过遍历数组，一个一个进行处理</li><li>将第一个数记录为最大值</li><li>从第一个加到最后，当比最大值大时，更新最大值</li><li>当前和为负数时，则下个数为开始值</li></ul><br/><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">FindGreatestSumOfSubArray</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max = array[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> j = array[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">            System.out.println(max);</span><br><span class="line">            <span class="keyword">if</span>(j &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                j = array[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                j = j + array[i];</span><br><span class="line">            &#125;</span><br><span class="line">             </span><br><span class="line">            <span class="keyword">if</span>(max &lt; j)&#123;</span><br><span class="line">                    max = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的一维模</summary>
      
    
    
    
    <category term="剑指offer" scheme="https://onehr7.github.io/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
    <category term="数组" scheme="https://onehr7.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>从尾到头打印链表</title>
    <link href="https://onehr7.github.io/2019/09/05/%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/"/>
    <id>https://onehr7.github.io/2019/09/05/%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/</id>
    <published>2019-09-05T03:07:33.000Z</published>
    <updated>2021-01-11T16:05:32.035Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>输入一个链表，按链表从尾到头的顺序返回一个ArrayList</p></blockquote><br/>#### 问题分析<ul><li>先将链表数据全部压入栈中</li><li>通过运用栈后入先出的性质</li><li>即可将数据反转</li></ul><br/>#### 知识点* ArrayList<Integer> list = new ArrayList<Integer>();* stack.push() || pop()* list.add(value);<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*    public class ListNode &#123;</span></span><br><span class="line"><span class="comment">*        int val;</span></span><br><span class="line"><span class="comment">*        ListNode next = null;</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*        ListNode(int val) &#123;</span></span><br><span class="line"><span class="comment">*            this.val = val;</span></span><br><span class="line"><span class="comment">*        &#125;</span></span><br><span class="line"><span class="comment">*    &#125;</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">printListFromTailToHead</span><span class="params">(ListNode listNode)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//将链表中的数据压入栈中</span></span><br><span class="line">        <span class="keyword">while</span>(listNode!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            stack.push(listNode.val);</span><br><span class="line">            listNode = listNode.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将栈中数据返回给ArrayList</span></span><br><span class="line">        <span class="keyword">while</span>(!stack.empty())&#123;</span><br><span class="line">            list.add(stack.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;输入一个链表，按链表从尾到头的顺序返回一个ArrayList&lt;/p&gt;
&lt;/blockquote&gt;
</summary>
      
    
    
    
    <category term="剑指offer" scheme="https://onehr7.github.io/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
    <category term="链表" scheme="https://onehr7.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>用两个栈实现队列</title>
    <link href="https://onehr7.github.io/2019/09/04/%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
    <id>https://onehr7.github.io/2019/09/04/%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</id>
    <published>2019-09-04T09:33:00.000Z</published>
    <updated>2021-01-11T16:05:30.986Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。</p></blockquote><br/>#### 问题分析- push    + 通过两个栈，两次颠倒顺序即可变为队列    ![avatar](/img/19_9_4.png)<ul><li>pop<ul><li>在push的基础上直接pop（）即可<br/></li></ul></li></ul><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    Stack&lt;Integer&gt; stack1 = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">    Stack&lt;Integer&gt; stack2 = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(!stack1.empty())&#123;</span><br><span class="line">            stack2.push(stack1.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        stack1.push(node);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(!stack2.empty())&#123;</span><br><span class="line">            stack1.push(stack2.pop());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stack1.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。&lt;/p&gt;
&lt;/</summary>
      
    
    
    
    <category term="剑指offer" scheme="https://onehr7.github.io/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
    <category term="队列" scheme="https://onehr7.github.io/tags/%E9%98%9F%E5%88%97/"/>
    
    <category term="栈" scheme="https://onehr7.github.io/tags/%E6%A0%88/"/>
    
  </entry>
  
</feed>
